window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "cave_utils", "modulename": "cave_utils", "kind": "module", "doc": "<p>The cave_utils package is a collection of utility classes and functions that are used in the CAVE project.</p>\n\n<p>On the left hand side, you will find all available submodules, and their associated docs.</p>\n\n<p>Click on a submodule to see the documentation for that submodule.</p>\n"}, {"fullname": "cave_utils.api", "modulename": "cave_utils.api", "kind": "module", "doc": "<h1 id=\"api\">API</h1>\n\n<p>This module serves to document the <code>cave_app</code> API data structures.</p>\n\n<h2 id=\"api-reference\">API Reference</h2>\n\n<p>Classes represent the actual API items and should have relevant API documentation for each item at the class level. In this current module, the <code>root</code> class represents the root of the API. The method <code>spec</code> details exactly what must be passed to root as well as other relevant documentation.</p>\n\n<p>Submodules (and their classes) are used to define the api at each level. You can use the links on the left to navigate into the API and get detailed documentation for each API item at each level.</p>\n\n<p>See the left hand side for all available submodules.</p>\n"}, {"fullname": "cave_utils.api.Root", "modulename": "cave_utils.api", "qualname": "Root", "kind": "class", "doc": "<p>The root of the CAVE API data structure.</p>\n\n<p>This should include all of the data needed to build out your application.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.Root.spec", "modulename": "cave_utils.api", "qualname": "Root.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>settings</code></strong>: <code>[dict]</code> &rarr; General settings for your application.\n<ul>\n<li><strong>Note</strong>: <code>settings.iconUrl</code> is the only required field in <code>settings</code></li>\n<li><strong>See</strong>: <code>cave_utils.api.settings</code></li>\n</ul></li>\n<li><strong><code>appBar</code></strong>: <code>[dict]</code> &rarr; Configure actions for your app bar(s).\n<ul>\n<li><strong>Note</strong>: <code>appBar.data</code> is required and should have at least one item in it.</li>\n<li><strong>See</strong>: <code>cave_utils.api.appBar</code></li>\n</ul></li>\n<li><strong><code>panes</code></strong>: <code>[dict]</code> = <code>{}</code> &rarr; Configure panes for your application.\n<ul>\n<li><strong>See</strong>: <code>cave_utils.api.panes</code></li>\n</ul></li>\n<li><strong><code>pages</code></strong>: <code>[dict]</code> = <code>{}</code> &rarr; Configure pages for your application.\n<ul>\n<li><strong>See</strong>: <code>cave_utils.api.pages</code></li>\n</ul></li>\n<li><strong><code>maps</code></strong>: <code>[dict]</code> = <code>{}</code> &rarr; Configure map views and settings for your application.\n<ul>\n<li><strong>See</strong>: <code>cave_utils.api.maps</code></li>\n</ul></li>\n<li><strong><code>mapFeatures</code></strong>: <code>[dict]</code> = <code>{}</code> &rarr;\n<ul>\n<li>Configure map features (interactive items on the map) for your application.</li>\n<li><strong>See</strong>: <code>cave_utils.api.mapFeatures</code></li>\n</ul></li>\n<li><strong><code>groupedOutputs</code></strong>: <code>[dict]</code> = <code>{}</code> &rarr;\n<ul>\n<li>Configure data that can be sliced and diced for charts and tables based on arbitrary groups.</li>\n<li><strong>See</strong>: <code>cave_utils.api.groupedOutputs</code></li>\n</ul></li>\n<li><strong><code>globalOutputs</code></strong>: <code>[dict]</code> = <code>{}</code> &rarr;\n<ul>\n<li>Configure data that is general to the entire application and can be compared across sessions.</li>\n<li><strong>See</strong>: <code>cave_utils.api.globalOutputs</code></li>\n</ul></li>\n<li><strong><code>extraKwargs</code></strong>: <code>[dict]</code> = <code>{}</code> &rarr; Special arguments to be passed to the server.\n<ul>\n<li><strong>See</strong>: <code>cave_utils.api.extraKwargs</code></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">appBar</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">panes</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">pages</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">maps</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">mapFeatures</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">groupedOutputs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">globalOutputs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">extraKwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.appBar", "modulename": "cave_utils.api.appBar", "kind": "module", "doc": "<p>The app bar is a key element of the CAVE App, positioned on the left or\nright side of the screen. It provides actions that allow users to\nnavigate between <a href=\"pages.html\">pages</a>, launch <a href=\"panes.html\">panes</a>, and interact with the\nCAVE API through <a href=\"#appBar_data_star.spec\">predefined</a> or <a href=\"#appBar_data_star.spec\">custom</a> commands.</p>\n\n<p>If specified, both left and right side app bars can be displayed\nsimultaneously.</p>\n"}, {"fullname": "cave_utils.api.appBar.appBar", "modulename": "cave_utils.api.appBar", "qualname": "appBar", "kind": "class", "doc": "<p>The app bar is located under the path <strong><code>appBar</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.appBar.appBar_data_star", "modulename": "cave_utils.api.appBar", "qualname": "appBar_data_star", "kind": "class", "doc": "<p>The app bar data is located under the path <strong><code>appBar.data</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.appBar.appBar_data_star.spec", "modulename": "cave_utils.api.appBar", "qualname": "appBar_data_star.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>icon</code></strong>: <code>[str]</code> &rarr; An icon to display in the center of the action element.\n<ul>\n<li><strong>Note</strong>: It must be a valid icon name from the <a href=\"https://react-icons.github.io/react-icons/search\">react-icons</a> bundle, preceded by the abbreviated name of the icon library source.</li>\n<li><strong>Example</strong>: <code>\"md/MdRocket\"</code>.</li>\n</ul></li>\n<li><strong><code>type</code></strong>: <code>[str]</code> &rarr; The type of object displayed when the action is triggered.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"session\"</code>: The Session Pane</li>\n<li><code>\"settings\"</code>: The Application Settings Pane</li>\n<li><code>\"button\"</code>: A button that allows you to send a command to the CAVE API</li>\n<li><code>\"pane\"</code>: A [custom pane][]</li>\n<li><code>\"page\"</code>: A <a href=\"pages.html\">page</a></li>\n</ul></li>\n</ul></li>\n<li><strong><code>bar</code></strong>: <code>[str]</code> &rarr; The location of the action element.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"upperLeft\"</code>: Upper section of the left-side bar</li>\n<li><code>\"lowerLeft\"</code>: Lower section of the left-side bar</li>\n<li><code>\"upperRight\"</code>: Upper section of the right-side bar</li>\n<li><code>\"lowerRight\"</code>: Lower section of the right-side bar</li>\n</ul></li>\n</ul></li>\n<li><strong><code>variant</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The variant of the button.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li>When <strong><code>type</code></strong> == <code>\"pane\"</code>:\n<ul>\n<li><code>\"modal\"</code>: A <a href=\"panes.html\">modal pane</a></li>\n<li><code>\"wall\"</code>: A <a href=\"panes.html\">wall pane</a></li>\n</ul></li>\n<li>Otherwise:\n<ul>\n<li><code>None</code></li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li><strong><code>color</code></strong>: <code>[str]</code> = <code>&lt;system-default-value&gt;</code> &rarr;\n<ul>\n<li>The color of the button. If omitted, the default value is set by the system.</li>\n<li><strong>Note</strong>: It must be a valid RGBA string.</li>\n<li><strong>Example</strong>: <code>\"rgba(255, 255, 255, 1)\"</code>.</li>\n</ul></li>\n<li><strong><code>apiCommand</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The name of the <a href=\"#appBar_data_star.spec\">API command</a> to trigger.</li>\n<li><strong><code>apiCommandKeys</code></strong>: <code>[list[str]]</code> = <code>None</code> &rarr;\n<ul>\n<li>The root API keys to pass to your <code>execute_command</code> function if an\n<code>apiCommand</code> is provided. If omitted, all API keys are\npassed to <code>execute_command</code>.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">icon</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bar</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\tvariant: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tcolor: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tapiCommand: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"n\">apiCommandKeys</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.extraKwargs", "modulename": "cave_utils.api.extraKwargs", "kind": "module", "doc": "<p>Optionally, pass special arguments to adjust some options related to\nhow the CAVE API server handles data.</p>\n"}, {"fullname": "cave_utils.api.extraKwargs.extraKwargs", "modulename": "cave_utils.api.extraKwargs", "qualname": "extraKwargs", "kind": "class", "doc": "<p>The special arguments are located under the path <strong><code>extraKwargs</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.extraKwargs.extraKwargs.spec", "modulename": "cave_utils.api.extraKwargs", "qualname": "extraKwargs.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>wipeExisting</code></strong>: <code>[bool]</code> = <code>False</code> &rarr;\n<ul>\n<li>If set to <code>True</code>, all existing data will be deleted just\nbefore session data updates are merged. By default (set to\n<code>False</code>), the CAVE API will merge new data with existing\ndata.</li>\n<li><strong>Note</strong>: The data is merged at the root level. In this\ncase, if you update an item in <code>settings</code>, the entire\n<code>settings</code> object must be present when you return\n<code>session_data</code>.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">wipeExisting</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.globalOutputs", "modulename": "cave_utils.api.globalOutputs", "kind": "module", "doc": "<p>Create outputs that allow for simple charts and tables to present some totalization or global outcome of the data.</p>\n\n<p>These outputs should be general to the entire application and they can be compared across sessions.</p>\n"}, {"fullname": "cave_utils.api.globalOutputs.globalOutputs", "modulename": "cave_utils.api.globalOutputs", "qualname": "globalOutputs", "kind": "class", "doc": "<p>The global outputs data is located under the path <strong><code>globalOutputs</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.globalOutputs.globalOutputs.spec", "modulename": "cave_utils.api.globalOutputs", "qualname": "globalOutputs.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>props</code></strong>: <code>[dict]</code> &rarr; The props that will be rendered as global outputs.\n<ul>\n<li><strong>See</strong>: <code>cave_utils.api_utils.general.props</code></li>\n</ul></li>\n<li><strong><code>values</code></strong>: <code>[dict]</code> = <code>None</code> &rarr;\n<ul>\n<li>The values to be assigned to the respective props. Each value is associated with its corresponding prop based on the key name used in <code>props</code>.</li>\n<li><strong>See</strong>: <code>cave_utils.api_utils.general.values</code></li>\n</ul></li>\n<li><strong><code>layout</code></strong>: <code>[dict]</code> =<code>{\"type\": \"grid\", \"numColumns\": \"auto\", \"numRows\": \"auto\"}</code> &rarr;\n<ul>\n<li>The layout of the global outputs when the \"Overview\" chart is selected.</li>\n<li><strong>See</strong>: <code>cave_utils.api_utils.general.layout</code></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">props</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\tvalues: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\tlayout: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.groupedOutputs", "modulename": "cave_utils.api.groupedOutputs", "kind": "module", "doc": "<p>Create grouped outputs for building generalized charts and tables.</p>\n"}, {"fullname": "cave_utils.api.groupedOutputs.groupedOutputs", "modulename": "cave_utils.api.groupedOutputs", "qualname": "groupedOutputs", "kind": "class", "doc": "<p>The grouped outputs are located under the path <strong><code>groupedOutputs</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.groupedOutputs.groupedOutputs.spec", "modulename": "cave_utils.api.groupedOutputs", "qualname": "groupedOutputs.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>groupings</code></strong>: <code>[dict]</code> &rarr; A dictionary of groupings that are available for the data.\n<ul>\n<li><strong>See</strong>: <code>groupedOutputs.groupings</code></li>\n</ul></li>\n<li><strong><code>data</code></strong>: <code>[dict]</code> &rarr; The data to be grouped.\n<ul>\n<li><strong>See</strong>: <code>groupedOutputs.data</code></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">groupings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.groupedOutputs.groupedOutputs_data_star", "modulename": "cave_utils.api.groupedOutputs", "qualname": "groupedOutputs_data_star", "kind": "class", "doc": "<p>The grouped outputs data is located under the path <strong><code>groupedOutputs.data.*</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.groupedOutputs.groupedOutputs_data_star.spec", "modulename": "cave_utils.api.groupedOutputs", "qualname": "groupedOutputs_data_star.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>stats</code></strong>: <code>[dict]</code> &rarr; A dictionary of stats that are available for the data.\n<ul>\n<li><strong>See</strong>: <code>cave_utils.api.groupedOutputs.groupedOutputs_data_star_stats</code>\n<strong><code>valueLists</code></strong>: <code>[dict]</code> &rarr; A dictionary of lists that make up the stats for the data.</li>\n<li><strong>See</strong>: <code>cave_utils.api.groupedOutputs.groupedOutputs_data_star_valueLists</code></li>\n<li><strong>Note</strong>: Each key must also be a key in <code>groupedOutputs.data.*.stats</code>.\n<strong><code>groupLists</code></strong>: <code>[dict]</code> &rarr; A dictionary of lists that make up the groupings for the data.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stats</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">valueLists</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">groupLists</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.groupedOutputs.groupedOutputs_data_star_stats", "modulename": "cave_utils.api.groupedOutputs", "qualname": "groupedOutputs_data_star_stats", "kind": "class", "doc": "<p>The grouped output stats are located under the path <strong><code>groupedOutputs.data.*.stats</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.groupedOutputs.groupedOutputs_data_star_stats.spec", "modulename": "cave_utils.api.groupedOutputs", "qualname": "groupedOutputs_data_star_stats.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>name</code></strong>: <code>[str]</code> &rarr; The name of the stat.</li>\n<li><strong><code>unit</code></strong>: <code>[str]</code> &rarr; The unit to use for the stat.\n<ul>\n<li><strong>Note</strong>: If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.unit</code>.</li>\n</ul></li>\n<li><strong><code>unitPlacement</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The position of the <code>unit</code> symbol relative to the value.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"after\"</code>: The <code>unit</code> appears after the value.</li>\n<li><code>\"afterWithSpace\"</code>: The <code>unit</code> appears after the value, separated by a space.</li>\n<li><code>\"before\"</code>: The <code>unit</code> appears before the value.</li>\n<li><code>\"beforeWithSpace\"</code>: The unit is placed before the value, with a space in between.</li>\n</ul></li>\n<li><strong>Note</strong>: If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.unitPlacement</code>.</li>\n</ul></li>\n<li><strong><code>precision</code></strong>: <code>[int]</code> = <code>None</code> &rarr; The number of decimal places to display.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>Set the precision to <code>0</code> to attach an integer constraint.</li>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.precision</code>.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>trailingZeros</code></strong>: <code>[bool]</code> = <code>None</code> &rarr; If <code>True</code>, trailing zeros will be displayed.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>This ensures that all precision digits are shown. For example: <code>1.5</code> &rarr; <code>1.500</code> when precision is <code>3</code>.</li>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.trailingZeros</code>.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>notation</code></strong>: <code>[int]</code> = <code>\"standard\"</code> &rarr; The formatting style of a numeric value.</li>\n<li><strong><code>notationDisplay</code></strong>: <code>[str]</code> = <code>\"e+\"</code> | <code>\"short\"</code> | <code>None</code> &rarr; Further customize the formatting within the selected <code>notation</code>.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>No <code>notationDisplay</code> option is provided for a <code>\"standard\"</code> notation</li>\n<li>The options <code>\"short\"</code> and <code>\"long\"</code> are only provided for the <code>\"compact\"</code> notation</li>\n<li>The options <code>\"e\"</code>, <code>\"e+\"</code>, <code>\"E\"</code>, <code>\"E+\"</code>, <code>\"x10^\"</code>, and <code>\"x10^+\"</code> are provided for the <code>\"scientific\"</code>, <code>\"engineering\"</code> and <code>\"precision\"</code> notations</li>\n<li>If <code>None</code>, it defaults to <code>\"short\"</code> for <code>\"compact\"</code> notation, and to <code>\"e+\"</code> for <code>\"scientific\"</code>, <code>\"engineering\"</code> or <code>\"precision\"</code> notations; if the option is set to <code>\"standard\"</code>, its value remains <code>None</code>.</li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\tunit: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tunitPlacement: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tprecision: [&lt;class &#x27;int&#x27;&gt;, None] = None,</span><span class=\"param\">\ttrailingZeros: [&lt;class &#x27;bool&#x27;&gt;, None] = None,</span><span class=\"param\">\tnotation: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tnotationDisplay: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.groupedOutputs.groupedOutputs_data_star_valueLists", "modulename": "cave_utils.api.groupedOutputs", "qualname": "groupedOutputs_data_star_valueLists", "kind": "class", "doc": "<p>The value lists are located under the path <strong><code>groupedOutputs.data.*.valueLists</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.groupedOutputs.groupedOutputs_data_star_valueLists.spec", "modulename": "cave_utils.api.groupedOutputs", "qualname": "groupedOutputs_data_star_valueLists.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>yourCustomKeyHere</code></strong>: <code>[list]</code> &rarr;\n<ul>\n<li><ul>\n<li><strong>Note</strong>: Each custom key passed must also be a key in <code>groupedOutputs.data.*.stats</code>.</li>\n</ul></li>\n<li><ul>\n<li><strong>Note</strong>: Each value must be a list of integers or floats.</li>\n</ul></li>\n\n<p></ul></li>\n</ul></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.groupedOutputs.groupedOutputs_data_star_groupLists", "modulename": "cave_utils.api.groupedOutputs", "qualname": "groupedOutputs_data_star_groupLists", "kind": "class", "doc": "<p>The group lists are located under the path <strong><code>groupedOutputs.data.*.groupLists</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.groupedOutputs.groupedOutputs_data_star_groupLists.spec", "modulename": "cave_utils.api.groupedOutputs", "qualname": "groupedOutputs_data_star_groupLists.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>yourCustomKeyHere</code></strong>: <code>[list]</code> &rarr;\n<ul>\n<li><ul>\n<li><strong>Note</strong>: Each value must be a list of strings or ints.</li>\n</ul></li>\n<li><ul>\n<li><strong>Note</strong>: Each item in the passed value must also be found in <code>groupedOutputs.groupings.{yourCustomKeyHere}.data.id</code>.</li>\n</ul></li>\n\n<p></ul></li>\n</ul></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.groupedOutputs.groupedOutputs_groupings_star", "modulename": "cave_utils.api.groupedOutputs", "qualname": "groupedOutputs_groupings_star", "kind": "class", "doc": "<p>The groupings are located under the path <strong><code>groupedOutputs.groupings.*</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.groupedOutputs.groupedOutputs_groupings_star.spec", "modulename": "cave_utils.api.groupedOutputs", "qualname": "groupedOutputs_groupings_star.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>levels</code></strong>: <code>[dict]</code> &rarr;\n<ul>\n<li>A dictionary of levels that are available for the grouping.</li>\n<li><strong>See</strong>: <code>groupedOutputs_groupings_star_levels_star</code></li>\n</ul></li>\n<li><strong><code>data</code></strong>: <code>[dict]</code> &rarr; The data to be grouped.\n<ul>\n<li><strong>See</strong>: <code>groupedOutputs_groupings_star_data</code></li>\n</ul></li>\n<li><strong><code>name</code></strong>: <code>[str]</code> &rarr; The name of the grouping.</li>\n<li><strong><code>layoutDirection</code></strong>: <code>[str]</code> = <code>\"vertical\"</code> &rarr; The direction of the grouping levels in the layout.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"horizontal\"</code>: Plain number formatting</li>\n<li><code>\"vertical\"</code>: Resembles the <a href=\"https://en.wikipedia.org/wiki/Metric_prefix\">metric prefix</a> system</li>\n<li><code>\"scientific\"</code>: <a href=\"https://en.wikipedia.org/wiki/Scientific_notation\">Scientific notation</a></li>\n<li><code>\"engineering\"</code>: <a href=\"https://en.wikipedia.org/wiki/Engineering_notation\">Engineering notation</a></li>\n</ul></li>\n</ul></li>\n<li><strong><code>grouping</code></strong>: <code>[str]</code> = <code>None</code> &rarr;\n<ul>\n<li>A group that is created to put similar groupings together in the UI dropdowns when selecting groupings.</li>\n<li><strong>Note</strong>: If <code>None</code>, the grouping will be placed in the root of the UI dropdowns.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">levels</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">layoutDirection</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;vertical&#39;</span>,</span><span class=\"param\">\tgrouping: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.groupedOutputs.groupedOutputs_groupings_star_data", "modulename": "cave_utils.api.groupedOutputs", "qualname": "groupedOutputs_groupings_star_data", "kind": "class", "doc": "<p>The groupings data is located under the path <strong><code>groupedOutputs.groupings.*.data</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.groupedOutputs.groupedOutputs_groupings_star_data.spec", "modulename": "cave_utils.api.groupedOutputs", "qualname": "groupedOutputs_groupings_star_data.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>id</code></strong>: <code>[list]</code> &rarr; The id of the data to be grouped.\n<ul>\n<li><strong>Note</strong>: This can be a list of strings or ints.</li>\n</ul></li>\n<li><strong><code>customKeyHere</code></strong>: <code>[list]</code> &rarr;\n<ul>\n<li>The names of the data to be grouped for this feature/level.</li>\n<li><strong>Note</strong>: Each key listed here must be in <code>groupedOutputs.groupings.*.levels.*</code></li>\n<li><strong>Note</strong>: Each value must be a list of strings or ints.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.groupedOutputs.groupedOutputs_groupings_star_levels_star", "modulename": "cave_utils.api.groupedOutputs", "qualname": "groupedOutputs_groupings_star_levels_star", "kind": "class", "doc": "<p>The level data is located under the path <strong><code>groupedOutputs.groupings.*.levels.*</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.groupedOutputs.groupedOutputs_groupings_star_levels_star.spec", "modulename": "cave_utils.api.groupedOutputs", "qualname": "groupedOutputs_groupings_star_levels_star.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>name</code></strong>: <code>[str]</code> &rarr; The name of the level.</li>\n<li><strong><code>parent</code></strong>: <code>[str]</code> &rarr;\n<ul>\n<li>The key of the parent level. This is used to create a hierarchy of levels.</li>\n<li><strong>Notes</strong>:\n<ul>\n<li>The parent level key must be defined in <code>groupedOutputs.groupings.*.levels.*</code></li>\n<li>If <code>None</code>, this will be considered to be the root of the hierarchy.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>ordering</code></strong>: <code>[list]</code> &rarr;\n<ul>\n<li>The ordering of individual values for this level in charts and tables.</li>\n<li><strong>Note</strong>: If <code>None</code>, the ordering will be alphabetical.</li>\n<li><strong>Note</strong>: If a partial ordering is provided, the provided values will be placed first in order.</li>\n<li><strong>Note</strong>: If a partial ordering is provided, the remaining values will be placed in alphabetical order.</li>\n<li><strong>Note</strong>: All items in this list must be defined in <code>groupedOutputs.groupings.*.levels.*.values.*</code></li>\n</ul></li>\n<li><strong><code>orderWithParent</code></strong>: <code>[bool]</code> = <code>True</code> &rarr;\n<ul>\n<li>Whether or not to order this level based on the parent level.</li>\n<li>If <code>True</code>, the ordering of this level will also be based on the parent level.</li>\n<li>If <code>False</code>, the ordering will be based on the ordering of this level only.</li>\n</ul></li>\n<li><strong><code>coloring</code></strong>: <code>[dict]</code> &rarr;\n<ul>\n<li>A dictionary of colors to be used for the level.</li>\n<li>Each key in this dictionary is a value in the level.</li>\n<li>Each value in this dictionary is an rgba string.</li>\n<li><strong>See</strong>: <code>cave_utils.api.groupedOutputs.groupedOutputs_groupings_star_levels_star_coloring</code></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\tparent: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tordering: [&lt;class &#x27;list&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"n\">orderWithParent</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\tcoloring: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.mapFeatures", "modulename": "cave_utils.api.mapFeatures", "kind": "module", "doc": "<p>Create visualizations for your map, including <code>arc</code>s, <code>node</code>s, and <code>geo</code>s, and customize their appearance.</p>\n"}, {"fullname": "cave_utils.api.mapFeatures.mapFeatures", "modulename": "cave_utils.api.mapFeatures", "qualname": "mapFeatures", "kind": "class", "doc": "<p>The map features are located under the path <strong><code>mapFeatures</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.mapFeatures.mapFeatures.spec", "modulename": "cave_utils.api.mapFeatures", "qualname": "mapFeatures.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>data</code></strong>: <code>[dict]</code> = <code>{}</code> &rarr; The data to pass to <code>mapFeatures.data.*</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.mapFeatures.mapFeatures_data_star", "modulename": "cave_utils.api.mapFeatures", "qualname": "mapFeatures_data_star", "kind": "class", "doc": "<p>The map features data is located under the path <strong><code>mapFeatures.data.*</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.mapFeatures.mapFeatures_data_star.spec", "modulename": "cave_utils.api.mapFeatures", "qualname": "mapFeatures_data_star.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>type</code></strong>: <code>[str]</code> &rarr; The type of the map feature.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"arc\"</code>: An <code>arc</code> layer</li>\n<li><code>\"node\"</code>: A <code>node</code> layer</li>\n<li><code>\"geo\"</code>: A <code>geo</code> layer</li>\n</ul></li>\n</ul></li>\n<li><strong><code>name</code></strong>: <code>[str]</code> &rarr; The name of the map feature.</li>\n<li><strong><code>props</code></strong>: <code>[dict]</code> &rarr; The props that will be rendered in the map feature.\n<ul>\n<li><strong>See</strong>: <code>cave_utils.api_utils.general.props</code></li>\n</ul></li>\n<li><strong><code>data</code></strong>: <code>[dict]</code> &rarr; The data that will be passed to the props.\n<ul>\n<li><strong>See</strong>: <code>cave_utils.api_utils.general.values</code></li>\n</ul></li>\n<li><strong><code>layout</code></strong>: <code>[dict]</code> =<code>{\"type\": \"grid\", \"numColumns\": \"auto\", \"numRows\": \"auto\"}</code> &rarr;\n<ul>\n<li>The layout of the map feature data presented in a map modal.</li>\n<li><strong>See</strong>: <code>cave_utils.api_utils.general.layout</code></li>\n</ul></li>\n<li><strong><code>geoJson</code></strong>: <code>[dict]</code> =<code>{}</code> &rarr; A dictionary specifying the GeoJSON data to use.\n<ul>\n<li><strong>See</strong>: <code>cave_utils.api.mapFeatures.mapFeatures_data_star_geoJson</code></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">props</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\tlayout: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\tgeoJson: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.mapFeatures.mapFeatures_data_star_data", "modulename": "cave_utils.api.mapFeatures", "qualname": "mapFeatures_data_star_data", "kind": "class", "doc": "<p>The map features data is located under the path <strong><code>mapFeatures.data.*.data</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.mapFeatures.mapFeatures_data_star_data.spec", "modulename": "cave_utils.api.mapFeatures", "qualname": "mapFeatures_data_star_data.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>location</code></strong>: <code>[dict]</code> &rarr; The location lists of the map feature.\n<ul>\n<li><strong>See</strong>: <code>cave_utils.api.mapFeatures.mapFeatures_data_star_data_location</code></li>\n</ul></li>\n<li><strong><code>valueLists</code></strong>: <code>[dict]</code> &rarr; The value lists of the map feature.\n<ul>\n<li><strong>See</strong>: <code>cave_utils.api_utils.general.valueLists</code></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">valueLists</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.mapFeatures.mapFeatures_data_star_data_location", "modulename": "cave_utils.api.mapFeatures", "qualname": "mapFeatures_data_star_data_location", "kind": "class", "doc": "<p>The map features data is located under the path <strong><code>mapFeatures.data.*.data.location</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.mapFeatures.mapFeatures_data_star_data_location.spec", "modulename": "cave_utils.api.mapFeatures", "qualname": "mapFeatures_data_star_data_location.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>latitude</code></strong>: <code>list[list[float, int]]</code> = <code>None</code> &rarr; A list of latitudes for each node.\n<ul>\n<li><em>* Example <em></em>: <code>[45.34, 46.27, 47.34, 48.34]</code></li>\n<li><em></em> Notes *</em>: Used for <code>node</code> layers</li>\n</ul></li>\n<li><strong><code>longitude</code></strong>: <code>list[list[float, int]]</code> = <code>None</code> &rarr; A list of longitudes for each node.\n<ul>\n<li><em>* Example <em></em>: <code>[120.34, 121.27, 122.34, 123.34]</code></li>\n<li><em></em> Note *</em>: Used for <code>node</code> layers</li>\n</ul></li>\n<li><strong><code>altitude</code></strong>: <code>list[list[float, int]]</code> = <code>None</code> &rarr; The altitude for each node / geo in kilometers.\n<ul>\n<li><em>* Example <em></em>: <code>[0, 1000, 2000, 3000]</code></li>\n<li><em></em> Notes *</em>:\n<ul>\n<li>Used for <code>node</code> and <code>geo</code> layers</li>\n<li>This is currently ignored but is planned to be supported in the future.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>path</code></strong>: <code>list[list[list[float, int]]]</code> = <code>None</code> &rarr; A path for each arc in the format <code>[[long1,lat1,(optional alt1)],[long2,lat2,(optional alt2)],...]</code>.\n<ul>\n<li><em>* Example <em></em>: <code>[[[0,0],[1,1]],[[2,2],[3,3],[4,4],[5,5]]]</code></li>\n<li><em></em> Example with Altitude <em></em>: <code>[[[0,0,0],[1,1,1000]],[[2,2,2000],[3,3,3000],[4,4,4000],[5,5,5000]]]</code></li>\n<li><em></em> Note *</em>: Used for <code>arc</code> layers</li>\n</ul></li>\n<li><strong><code>geoJsonValue</code></strong>: <code>list[str]</code> = <code>None</code> &rarr; A list of geoJsonValue keys that correspond to the <code>properties</code> key specified as geoJsonProp in <code>mapFeatures.data.*.geoJson</code>.\n<ul>\n<li><em>* Note *</em>: Used for <code>arc</code>, <code>node</code>, and <code>geo</code> layers</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">latitude</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]],</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">longitude</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]],</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">altitude</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]],</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]],</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">geoJsonValue</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.mapFeatures.mapFeatures_data_star_geoJson", "modulename": "cave_utils.api.mapFeatures", "qualname": "mapFeatures_data_star_geoJson", "kind": "class", "doc": "<p>The map feature GeoJSON data is located under the path <strong><code>mapFeatures.data.*.geoJson</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.mapFeatures.mapFeatures_data_star_geoJson.spec", "modulename": "cave_utils.api.mapFeatures", "qualname": "mapFeatures_data_star_geoJson.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>geoJsonLayer</code></strong>: <code>[str]</code> &rarr; The URL of the GeoJSON layer to use.</li>\n<li><strong><code>geoJsonProp</code></strong>: <code>[str]</code> &rarr;\n<ul>\n<li>The <code>properties</code> key (from the object fetched from the <code>geoJsonLayer</code> URL) to match with the value at <code>mapFeatures.data.*.data.location.geoJsonValue.*</code>.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">geoJsonLayer</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">geoJsonProp</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.maps", "modulename": "cave_utils.api.maps", "kind": "module", "doc": "<p>Configure the style and UI elements of your application's maps.</p>\n"}, {"fullname": "cave_utils.api.maps.maps", "modulename": "cave_utils.api.maps", "qualname": "maps", "kind": "class", "doc": "<p>The maps are located under the path <code>maps</code>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.maps.maps.spec", "modulename": "cave_utils.api.maps", "qualname": "maps.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>additionalMapStyles</code></strong>: <code>[dict]</code> = <code>{}</code> &rarr;\n<ul>\n<li>A dictionary of map specifications that define alternative visual appearances of a map.</li>\n</ul></li>\n<li><strong><code>data</code></strong>: <code>[dict]</code> = <code>{}</code> &rarr; The data to pass to <code>maps.data.*</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">additionalMapStyles</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.maps.maps_additionalMapStyles_star", "modulename": "cave_utils.api.maps", "qualname": "maps_additionalMapStyles_star", "kind": "class", "doc": "<p>The additional map styles are located under the path <code>maps.additionalMapStyles.*</code>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.maps.maps_additionalMapStyles_star.spec", "modulename": "cave_utils.api.maps", "qualname": "maps_additionalMapStyles_star.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>name</code></strong>: <code>[str]</code> &rarr; The name of the map style.</li>\n<li><strong><code>icon</code></strong>: <code>[str]</code> = <code>\"md/MdMap\"</code> &rarr; The icon to show in the map selection menu.</li>\n<li><strong><code>spec\u200b</code></strong>: <code>[dict | str]</code> &rarr; The spec to generate the map\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>If <code>spec\u200b</code> is a string, it will be treated as a URL to a JSON spec file.</li>\n<li><code>spec\u200b</code> is only validated for its type, which can be either a <code>dict</code> or a <code>str</code>.</li>\n</ul></li>\n<li><strong>See</strong>:\n<ul>\n<li>Mapbox: <a href=\"https://docs.mapbox.com/api/maps/styles/\"><a href=\"https://docs.mapbox.com/api/maps/styles/\"><a href=\"https://docs.mapbox.com/api/maps/styles/\">https://docs.mapbox.com/api/maps/styles/</a></a></a></li>\n<li>Carto: <a href=\"https://github.com/CartoDB/basemap-styles/blob/master/docs/basemap_styles.json\"><a href=\"https://github.com/CartoDB/basemap-styles/blob/master/docs/basemap_styles.json\"><a href=\"https://github.com/CartoDB/basemap-styles/blob/master/docs/basemap_styles.json\">https://github.com/CartoDB/basemap-styles/blob/master/docs/basemap_styles.json</a></a></a></li>\n<li>Raster: <a href=\"https://docs.mapbox.com/mapbox-gl-js/example/map-tiles/\"><a href=\"https://docs.mapbox.com/mapbox-gl-js/example/map-tiles/\"><a href=\"https://docs.mapbox.com/mapbox-gl-js/example/map-tiles/\">https://docs.mapbox.com/mapbox-gl-js/example/map-tiles/</a></a></a></li>\n</ul></li>\n</ul></li>\n<li><strong><code>fog</code></strong>: <code>[dict]</code> = <code>None</code> &rarr; The fog to show in the map selection menu.\n<ul>\n<li><strong>Note</strong>: <code>fog</code> is only validated for its type (<code>dict</code>).</li>\n<li><strong>See</strong>: <a href=\"https://docs.mapbox.com/mapbox-gl-js/api/map/#map#setfog\"><a href=\"https://docs.mapbox.com/mapbox-gl-js/api/map/#map#setfog\">https://docs.mapbox.com/mapbox-gl-js/api/map/#map#setfog</a></a></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\tspec: [&lt;class &#x27;dict&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;],</span><span class=\"param\">\tfog: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"n\">icon</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;md/MdMap&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.maps.maps_data_star", "modulename": "cave_utils.api.maps", "qualname": "maps_data_star", "kind": "class", "doc": "<p>The maps are located under the path <code>maps.data.*</code>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.maps.maps_data_star.spec", "modulename": "cave_utils.api.maps", "qualname": "maps_data_star.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>name</code></strong>: <code>[str]</code> &rarr; The name of the map.</li>\n<li><strong><code>currentStyle</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The map's style id applied when the map is first loaded.</li>\n<li><strong><code>currentProjection</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The map's projection id applied when the map is first loaded.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"mercator\"</code>: The <a href=\"https://en.wikipedia.org/wiki/Mercator_projection\">Mercator projection</a></li>\n<li><code>\"globe\"</code>: The map is displayed as a 3D globe</li>\n</ul></li>\n</ul></li>\n<li><strong><code>defaultViewport</code></strong>: <code>[dict]</code> = <code>None</code> &rarr; The default viewport to use.\n<ul>\n<li><strong>Note</strong>: The value of this attribute should match the structure of a viewport object.</li>\n<li><strong>See</strong>: <code>cave_utils.api.maps.viewport</code></li>\n</ul></li>\n<li><strong><code>optionalViewports</code></strong>: <code>[dict]</code> = <code>None</code> &rarr; The optional viewports that can be selected by the end user.\n<ul>\n<li><strong>Note</strong>: The value of this attribute should match the structure of a dictionary of viewport objects.</li>\n<li><strong>See</strong>: <code>cave_utils.api.maps.viewport</code></li>\n</ul></li>\n<li><strong><code>legendGroups</code></strong>: <code>[dict]</code> = <code>None</code> &rarr; The legend groups to show in the map selection menu.</li>\n<li><strong><code>legendView</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The view to show in the map selection menu.\n<ul>\n<li><em>* Accepted Values</em>*:\n<ul>\n<li><code>\"compact\"</code>: Display the legend in a compact format.</li>\n<li><code>\"full\"</code>: Display the full legend.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>showLegendGroupNames</code></strong>: <code>[bool]</code> = <code>None</code> &rarr; Whether or not to show the legend group names in the map selection menu.</li>\n<li><strong><code>legendLayout</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The layout of the legend.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"auto\"</code>: Sets the layout to column when legedView is full and row when legendView is compact.</li>\n<li><code>\"column\"</code>: Display the legend attributes per column (side by side).</li>\n<li><code>\"row\"</code>: Display the legend attributes per row (stacked vertically).</li>\n</ul></li>\n</ul></li>\n<li><strong><code>legendWidth</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The width of the legend.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"auto\"</code>: Sets the width to <code>wide</code> when legendView is full and <code>slim</code> when legendView is compact.</li>\n<li><code>\"slim\"</code>: Sets teh legend witdth to 400px.</li>\n<li><code>\"wide\"</code>: Sets the legend width to 700px.</li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\tcurrentStyle: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tcurrentProjection: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tdefaultViewport: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\toptionalViewports: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\tlegendGroups: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\tlegendView: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tshowLegendGroupNames: [&lt;class &#x27;bool&#x27;&gt;, None] = None,</span><span class=\"param\">\tlegendLayout: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tlegendWidth: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.maps.viewport", "modulename": "cave_utils.api.maps", "qualname": "viewport", "kind": "class", "doc": "<p>The viewports can be located at the paths <code>maps.data.*.defaultViewport</code> and <code>maps.data.*.optionalViewports.*</code>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.maps.viewport.spec", "modulename": "cave_utils.api.maps", "qualname": "viewport.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>latitude</code></strong>: <code>[float | int]</code> &rarr; The latitude of the viewport.\n<ul>\n<li><strong>Note</strong>: The value must be between -90 and 90.</li>\n</ul></li>\n<li><strong><code>longitude</code></strong>: <code>[float | int]</code> &rarr; The longitude of the viewport.\n<ul>\n<li><strong>Note</strong>: The value must be between -180 and 180.</li>\n</ul></li>\n<li><strong><code>zoom</code></strong>: <code>[float | int]</code> &rarr; The zoom of the viewport.\n<ul>\n<li><strong>Note</strong>: The value must be between 0 and 22.</li>\n</ul></li>\n<li><strong><code>bearing</code></strong>: <code>[float | int]</code> = <code>None</code> &rarr; The bearing of the viewport.\n<ul>\n<li><strong>Note</strong>: The value must be between 0 and 360.</li>\n</ul></li>\n<li><strong><code>pitch</code></strong>: <code>[float | int]</code> = <code>None</code> &rarr; The pitch of the viewport.\n<ul>\n<li><strong>Note</strong>: The value must be between 0 and 60.</li>\n</ul></li>\n<li><strong><code>maxZoom</code></strong>: <code>[float | int]</code> = <code>None</code> &rarr; The maximum zoom of the viewport.\n<ul>\n<li><strong>Note</strong>: The value must be between 0 and 22.</li>\n</ul></li>\n<li><strong><code>minZoom</code></strong>: <code>[float | int]</code> = <code>None</code> &rarr; The minimum zoom of the viewport.\n<ul>\n<li><strong>Note</strong>: The value must be between 0 and 22.</li>\n</ul></li>\n<li><strong><code>icon</code></strong>: <code>[str]</code> = <code>\"md/MdGpsFixed\"</code> &rarr; The icon to use for the viewport.</li>\n<li><strong><code>name</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The name of the viewport.\n<ul>\n<li><strong>Note</strong>: Only used for optional viewports.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tlatitude: [&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;],</span><span class=\"param\">\tlongitude: [&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;],</span><span class=\"param\">\tzoom: [&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;],</span><span class=\"param\">\tbearing: [&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, None] = None,</span><span class=\"param\">\tpitch: [&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, None] = None,</span><span class=\"param\">\tmaxZoom: [&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, None] = None,</span><span class=\"param\">\tminZoom: [&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, None] = None,</span><span class=\"param\">\ticon: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tname: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.maps.maps_data_star_legendGroups_star", "modulename": "cave_utils.api.maps", "qualname": "maps_data_star_legendGroups_star", "kind": "class", "doc": "<p>The legend groups are located under the path <code>maps.data.*.legendGroups.*</code>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.maps.maps_data_star_legendGroups_star.spec", "modulename": "cave_utils.api.maps", "qualname": "maps_data_star_legendGroups_star.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>name</code></strong>: <code>[str]</code> &rarr; The name of the legend group as displayed in the Map Legend.</li>\n<li><strong><code>data</code></strong>: <code>[dict]</code> &rarr; The relevant <code>data</code> dictionary for this legend group.\n<ul>\n<li><strong>See</strong>: <code>cave_utils.api.maps.maps_data_star_legendGroups_star_data_star</code></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.maps.maps_data_star_legendGroups_star_data_star", "modulename": "cave_utils.api.maps", "qualname": "maps_data_star_legendGroups_star_data_star", "kind": "class", "doc": "<p>The legend group data is located under the path <code>maps.data.*.legendGroups.*.data.*</code>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.maps.maps_data_star_legendGroups_star_data_star.spec", "modulename": "cave_utils.api.maps", "qualname": "maps_data_star_legendGroups_star_data_star.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>value</code></strong>: <code>[bool]</code> &rarr; Whether or not to show this data layer on the map.</li>\n<li><strong><code>sizeBy</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The prop id to use for sizing the data layer.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>If <code>None</code>, the data layer will not be sized</li>\n<li>Does not apply to shape layers</li>\n</ul></li>\n</ul></li>\n<li><strong><code>colorBy</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The prop id to use for coloring the data layer.\n<ul>\n<li><strong>Note</strong>: If <code>None</code>, the data layer will not be colored</li>\n</ul></li>\n<li><strong><code>lineStyle</code></strong>: <code>[str]</code> = <code>\"solid\"</code> &rarr; The type of line to use for the data layer.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"solid\"</code>: Represents a single continuous line.</li>\n<li><code>\"dashed\"</code>: A series of dashes or line segments</li>\n<li><code>\"dotted\"</code>: A dotted line</li>\n</ul></li>\n<li><strong>Note</strong>: This attribute applies exclusively to <code>arc</code> layers.</li>\n</ul></li>\n<li><strong><code>allowGrouping</code></strong>: <code>[bool]</code> = <code>False</code> &rarr; Whether or not to allow grouping of the data layer.\n<ul>\n<li><strong>Note</strong>: This attribute applies exclusively to <code>node</code> layers.</li>\n</ul></li>\n<li><strong><code>group</code></strong>: <code>[bool]</code> = <code>False</code> &rarr; Whether or not to group the data layer.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>If <code>False</code>, the data layer will not be grouped</li>\n<li>This attribute applies exclusively to <code>node</code> layers</li>\n</ul></li>\n</ul></li>\n<li><strong><code>groupCalcBySize</code></strong>: <code>[str]</code> = <code>\"count\"</code> | <code>\"mode\"</code> &rarr; The aggregation function to use on the prop specified in <code>sizeBy</code>.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li>When <strong><code>sizeBy</code></strong> prop's <strong><code>type</code></strong> == <code>\"num\"</code>:\n<ul>\n<li><code>\"count\"</code>: Total number of nodes in the cluster</li>\n<li><code>\"sum\"</code>: Total sum of values within the cluster</li>\n<li><code>\"mean\"</code>: Average value within the cluster</li>\n<li><code>\"median\"</code>: Median value within the cluster</li>\n<li><code>\"mode\"</code>: Most frequently occurring value within the cluster</li>\n<li><code>\"max\"</code>: Maximum value within the cluster</li>\n<li><code>\"min\"</code>: Minimum value within the cluster</li>\n</ul></li>\n<li>When <strong><code>sizeBy</code></strong> prop's <strong><code>type</code></strong> == <code>\"toggle\"</code>:\n<ul>\n<li><code>\"mode\"</code>: Most frequently occurring value within the cluster</li>\n<li><code>\"and\"</code>: Determine if all values in the cluster are <code>True</code></li>\n<li><code>\"or\"</code>: Determine if at least one value in the cluster is <code>True</code></li>\n</ul></li>\n<li>When <strong><code>sizeBy</code></strong> prop's <strong><code>type</code></strong> == <code>\"selector\"</code>:\n<ul>\n<li><code>\"mode\"</code>: Most frequently occurring value within the cluster</li>\n</ul></li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>If <code>None</code>, the data layer will not be grouped</li>\n<li>The calculation is based on the values of the prop specified in <code>sizeBy</code></li>\n<li>The default value for a <code>sizeBy</code> prop of type <code>\"num\"</code> is <code>\"count\"</code>. For other types, the default value is <code>\"mode\"</code>.</li>\n<li>This attribute applies exclusively to <code>node</code> layers</li>\n</ul></li>\n</ul></li>\n<li><strong><code>groupCalcByColor</code></strong>: <code>[str]</code> = <code>\"count\"</code> | <code>\"mode\"</code> &rarr; The aggregation function to use on the prop specified in <code>colorBy</code>.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li>When <strong><code>colorBy</code></strong> prop's <strong><code>type</code></strong> == <code>\"num\"</code>:\n<ul>\n<li><code>\"count\"</code>: Total number of nodes in the cluster</li>\n<li><code>\"sum\"</code>: Total sum of values within the cluster</li>\n<li><code>\"mean\"</code>: Average value within the cluster</li>\n<li><code>\"median\"</code>: Median value within the cluster</li>\n<li><code>\"mode\"</code>: Most frequently occurring value within the cluster</li>\n<li><code>\"max\"</code>: Maximum value within the cluster</li>\n<li><code>\"min\"</code>: Minimum value within the cluster</li>\n</ul></li>\n<li>When <strong><code>colorBy</code></strong> prop's <strong><code>type</code></strong> == <code>\"toggle\"</code>:\n<ul>\n<li><code>\"mode\"</code>: Total number of nodes in the cluster</li>\n<li><code>\"and\"</code>: Determine if all values in the cluster are <code>True</code></li>\n<li><code>\"or\"</code>: Determine if at least one value in the cluster is <code>True</code></li>\n</ul></li>\n<li>When <strong><code>colorBy</code></strong> prop's <strong><code>type</code></strong> == <code>\"selector\"</code>:\n<ul>\n<li><code>\"mode\"</code>: Most frequently occurring value within the cluster</li>\n</ul></li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>If <code>None</code>, the data layer will not be grouped</li>\n<li>The calculation is based on the prop specified in <code>colorBy</code></li>\n<li>The default value for a <code>colorBy</code> prop of type <code>\"num\"</code> is <code>\"count\"</code>. For other types, the default value is <code>\"mode\"</code>.</li>\n<li>This attribute applies exclusively to <code>node</code> layers</li>\n</ul></li>\n</ul></li>\n<li><strong><code>groupScaleWithZoom</code></strong>: <code>[bool]</code> = <code>False</code> &rarr; Whether or not to scale the group size with zoom.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>If <code>False</code>, the group size will be constant as set by <code>groupScale</code></li>\n<li>This attribute applies exclusively to <code>node</code> layers</li>\n</ul></li>\n</ul></li>\n<li><strong><code>groupScale</code></strong>: <code>[float | int]</code> = <code>None</code> &rarr; The zoom level at which to conduct grouping of the nodes.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>If <code>None</code>, the group scale will be determined by the map zoom.</li>\n<li>This attribute applies exclusively to <code>node</code> layers</li>\n</ul></li>\n</ul></li>\n<li><p><strong><code>colorByOptions</code></strong>: <code>[list]</code> = <code>None</code> &rarr; The allowed props to color the data layer.</p>\n\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>If <code>None</code>, the data layer will not be colored.</li>\n<li>Only props of type <code>\"num\"</code>, <code>\"toggle\"</code>, <code>\"selector\"</code> and <code>\"text\"</code> can be colored.</li>\n</ul></li>\n<li><p><strong>Example</strong>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"s2\">&quot;colorByOptions&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;numericPropExample&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;selectorPropExample&quot;</span><span class=\"p\">]</span>\n</code></pre>\n</div></li>\n<li><p><strong>See</strong>: <code>cave_utils.api.maps.colorByOptions</code></p></li>\n</ul></li>\n<li><p><strong><code>sizeByOptions</code></strong>: <code>[list]</code> = <code>None</code> &rarr; The allowed props for sizing the data layer.</p>\n\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>If <code>None</code>, the data layer will not be sized.</li>\n<li>Does not apply to shape layers</li>\n<li>Only props of type <code>\"num\"</code>, <code>\"toggle\"</code>, <code>\"selector\"</code> and <code>\"text\"</code> can be sized.</li>\n</ul></li>\n<li><p><strong>Example</strong>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"s2\">&quot;sizeByOptions&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;numericPropExample&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;selectorPropExample&quot;</span><span class=\"p\">]</span>\n</code></pre>\n</div></li>\n<li><p><strong>See</strong>: <code>cave_utils.api.maps.sizeByOptions</code></p></li>\n</ul></li>\n<li><strong><code>icon</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The icon to use for the data layer.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>Arc layer icons are determined by <code>lineStyle</code>.</li>\n<li>Shape layer icons are always the default icon.</li>\n<li>This attribute applies exclusively to <code>node</code> layers</li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\tsizeBy: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tcolorBy: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tlineStyle: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"n\">allowGrouping</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\tgroup: [&lt;class &#x27;bool&#x27;&gt;, None] = False,</span><span class=\"param\">\tgroupCalcBySize: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tgroupCalcByColor: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"n\">groupScaleWithZoom</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\tgroupScale: [&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, None] = None,</span><span class=\"param\">\tcolorByOptions: [&lt;class &#x27;list&#x27;&gt;, None] = None,</span><span class=\"param\">\tsizeByOptions: [&lt;class &#x27;list&#x27;&gt;, None] = None,</span><span class=\"param\">\ticon: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.pages", "modulename": "cave_utils.api.pages", "kind": "module", "doc": "<p>Configure your application's pages.</p>\n"}, {"fullname": "cave_utils.api.pages.pages", "modulename": "cave_utils.api.pages", "qualname": "pages", "kind": "class", "doc": "<p>The pages are located under the path <strong><code>pages</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.pages.pages.spec", "modulename": "cave_utils.api.pages", "qualname": "pages.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>current_page</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The id of the current page that is being rendered.</li>\n<li><strong><code>data</code></strong>: <code>[dict]</code> = <code>{}</code> &rarr; The data to pass to <code>pages.data.*</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\">currentPage: [&lt;class &#x27;str&#x27;&gt;, None] = None, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.pages.pages_data_star", "modulename": "cave_utils.api.pages", "qualname": "pages_data_star", "kind": "class", "doc": "<p>The pages data are located under the path <strong><code>pages.data</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.pages.pages_data_star.spec", "modulename": "cave_utils.api.pages", "qualname": "pages_data_star.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>charts</code></strong>: <code>[dict]</code> = <code>{}</code> &rarr; The charts to display on the page.\n<ul>\n<li><strong>See</strong>: <code>cave_utils.api.pages.pages_data_star_charts</code>.</li>\n</ul></li>\n<li><strong><code>pageLayout</code></strong>: <code>[list[str]]</code> = <code>{}</code> &rarr; The layout of the page.\n<ul>\n<li><strong>See</strong>: <code>cave_utils.api.pages.pages_data_star_pageLayout</code>.</li>\n</ul></li>\n<li><strong><code>lockedLayout</code></strong>: <code>[bool]</code> = <code>False</code> &rarr; Whether or not the layout should be locked.\n<ul>\n<li><strong>See</strong>: <code>cave_utils.api.pages.pages_data_star_pageLayout</code>.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tcharts: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\tpageLayout: [&lt;class &#x27;list&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"n\">lockedLayout</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.pages.pages_data_star_charts", "modulename": "cave_utils.api.pages", "qualname": "pages_data_star_charts", "kind": "class", "doc": "<p>The charts are located under the path <strong><code>pages.data.*.charts</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.pages.pages_data_star_charts.spec", "modulename": "cave_utils.api.pages", "qualname": "pages_data_star_charts.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>type</code></strong>: <code>[str]</code> = <code>\"groupedOutput\"</code> &rarr; The type of the page layout.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"groupedOutput\"</code>: The <code>unit</code> appears after the value.</li>\n<li><code>\"globalOutput\"</code>: The <code>unit</code> appears after the value, separated by a space.</li>\n<li><code>\"map\"</code>: The <code>unit</code> appears before the value.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>dataset</code></strong>: <code>[str | list]</code> = <code>None</code> &rarr; The id/key representing the grouped output data to use.</li>\n<li><strong><code>chartType</code></strong>: <code>[str]</code> = <code>\"bar\"</code> &rarr; The chartType of the page layout.\n<ul>\n<li>Accepted Values:\n<ul>\n<li>When <strong><code>type</code></strong> == <code>\"groupedOutput\"</code>:\n<ul>\n<li><code>\"area\"</code>: An <a href=\"https://en.wikipedia.org/wiki/Area_chart\">area chart</a></li>\n<li><code>\"bar\"</code>: A <a href=\"https://en.wikipedia.org/wiki/Bar_chart\">bar chart</a></li>\n<li><code>\"stacked_bar\"</code>: A <a href=\"https://en.wikipedia.org/wiki/Bar_chart\">stacked bar chart</a></li>\n<li><code>\"box_plot\"</code>: A <a href=\"https://en.wikipedia.org/wiki/Box_plot\">box plot chart</a></li>\n<li><code>\"cumulative_line\"</code>: A cumulative line chart</li>\n<li><code>\"gauge\"</code>: A <a href=\"https://echarts.apache.org/examples/en/index.html#chart-type-gauge\">gauge chart</a></li>\n<li><code>\"heatmap\"</code>: A <a href=\"https://en.wikipedia.org/wiki/Heat_map\">heatmap chart</a></li>\n<li><code>\"line\"</code>: A <a href=\"https://en.wikipedia.org/wiki/Line_chart\">line chart</a></li>\n<li><code>\"scatter\"</code>: A <a href=\"https://en.wikipedia.org/wiki/Scatter_plot\">scatter chart</a></li>\n<li><code>\"stacked_area\"</code>: An <a href=\"https://en.wikipedia.org/wiki/Area_chart\">stacked area chart</a></li>\n<li><code>\"stacked_waterfall\"</code>: An <a href=\"https://en.wikipedia.org/wiki/Waterfall_chart\">stacked waterfall chart</a></li>\n<li><code>\"sunburst\"</code>: A <a href=\"https://en.wikipedia.org/wiki/Pie_chart#Ring_chart,_sunburst_chart,_and_multilevel_pie_chart\">sunburst chart</a></li>\n<li><code>\"table\"</code>: A table showing the aggregated values.</li>\n<li><code>\"treemap\"</code>: A <a href=\"https://en.wikipedia.org/wiki/Treemapping\">treemap chart</a></li>\n<li><code>\"waterfall\"</code>: A <a href=\"https://en.wikipedia.org/wiki/Waterfall_chart\">waterfall chart</a></li>\n<li><code>\"distribution\"</code>: A <a href=\"https://en.wikipedia.org/wiki/Probability_distribution\">distribution chart</a></li>\n</ul></li>\n<li>When <strong><code>type</code></strong> == <code>\"globalOutput\"</code>:\n<ul>\n<li><code>\"bar\"</code>: A <a href=\"https://en.wikipedia.org/wiki/Bar_chart\">bar chart</a></li>\n<li><code>\"line\"</code>: A <a href=\"https://en.wikipedia.org/wiki/Line_chart\">line chart</a></li>\n<li><code>\"table\"</code>: A <a href=\"#\">table chart</a></li>\n<li><code>\"overview\"</code>: A summary of the global outputs presented in a KPI-like format</li>\n</ul></li>\n<li>Otherwise:\n<ul>\n<li><code>None</code></li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li><strong><code>mapId</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The id of the map to use.</li>\n<li><strong><code>groupingId</code></strong>: <code>[list]</code> = <code>None</code> &rarr; The ids of the grouping to use.</li>\n<li><strong><code>groupingLevel</code></strong>: <code>[list]</code> = <code>None</code> &rarr; The ids of the grouping levels to use.</li>\n<li><strong><code>stats</code></strong>: <code>[list]</code> = <code>None</code> &rarr; A list of stats to use.\n<ul>\n<li><strong>See</strong>: <code>cave_utils.api.pages.pages_data_star_charts_stats</code>.</li>\n</ul></li>\n<li><strong><code>chartOptions</code></strong>: <code>[dict]</code> = <code>None</code> &rarr; The options to pass to the chart.\n<ul>\n<li>TODO: Validate chart options</li>\n</ul></li>\n<li><strong><code>sessions</code></strong>: <code>[list]</code> = <code>None</code> &rarr; The ids of the sessions to use.</li>\n<li><strong><code>globalOutput</code></strong>: <code>[list]</code> = <code>None</code> &rarr; The ids of the global outputs to use.</li>\n<li><strong><code>lockedLayout</code></strong>: <code>[bool]</code> = <code>False</code> &rarr; Whether or not the layout should be locked.</li>\n<li><strong><code>statAggregation</code></strong>: <code>[str]</code> = <code>\"sum\"</code> &rarr; A stat aggregation function to apply to the chart data.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"sum\"</code>: Add up aggregated data</li>\n<li><code>\"mean\"</code>: Calculate the mean of the aggregated data</li>\n<li><code>\"min\"</code>: Find the minimum values within the aggregated data</li>\n<li><code>\"max\"</code>: Find the maximum values the aggregated data</li>\n</ul></li>\n</ul></li>\n<li><strong><code>showToolbar</code></strong>: <code>[bool]</code> = <code>None</code> &rarr; Whether or not the chart toolbar should be shown.\n<ul>\n<li><strong>Note</strong>: If left unspecified (i.e., <code>None</code>), it will default to <code>settings.showToolbar</code>.</li>\n</ul></li>\n<li><strong><code>maximized</code></strong>: <code>[bool]</code> = <code>False</code> &rarr; Whether or not the layout should be maximized.\n<ul>\n<li><strong>Note</strong>: If more than one chart belonging to the same page layout is set to <code>True</code>, the first one found in the list will take precedence.</li>\n</ul></li>\n<li><strong><code>defaultToZero</code></strong>: <code>[bool]</code> = <code>False</code> &rarr; Whether or not the chart should default missing values to zero.</li>\n<li><strong><code>distributionType</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The type of distribution function displayed in distribution charts.\n<ul>\n<li>Accepted Values:\n<ul>\n<li><code>\"pdf\"</code>: Uses the probability density function.</li>\n<li><code>\"cdf\"</code>: Uses the cumulative density function.</li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>\"pdf\"</code>.</li>\n<li>This attribute is applicable exclusively to the <code>\"distribution\"</code> chartType.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>distributionYAxis</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The y-axis metric in distribution charts.\n<ul>\n<li>Accepted Values:\n<ul>\n<li><code>\"counts\"</code>: Displays the y-axis as raw counts of occurrences.</li>\n<li><code>\"density\"</code>: Displays the y-axis as proportions of total counts.</li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>\"counts\"</code>.</li>\n<li>This attribute is applicable exclusively to the <code>\"distribution\"</code> chartType.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>distributionVariant</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The chart type displayed in distribution charts.\n<ul>\n<li>Accepted Values:\n<ul>\n<li><code>\"bar\"</code>: A bar chart.</li>\n<li><code>\"line\"</code>: A line chart.</li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>\"bar\"</code>.</li>\n<li>This attribute is applicable exclusively to the <code>\"distribution\"</code> chartType.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>showNA</code></strong>: <code>[bool]</code> = <code>False</code> &rarr; Whether to display missing or filtered values in both the chart tooltip and the axis.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;groupedOutput&#39;</span>,</span><span class=\"param\">\tdataset: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"n\">chartType</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bar&#39;</span>,</span><span class=\"param\">\tmapId: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tgroupingId: [&lt;class &#x27;list&#x27;&gt;, None] = None,</span><span class=\"param\">\tgroupingLevel: [&lt;class &#x27;list&#x27;&gt;, None] = None,</span><span class=\"param\">\tstats: [&lt;class &#x27;list&#x27;&gt;, None] = None,</span><span class=\"param\">\tchartOptions: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\tsessions: [&lt;class &#x27;list&#x27;&gt;, None] = None,</span><span class=\"param\">\tglobalOutput: [&lt;class &#x27;list&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"n\">lockedLayout</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">showToolbar</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">maximized</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">defaultToZero</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\tdistributionType: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tdistributionYAxis: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tdistributionVariant: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"n\">showNA</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.pages.pages_data_star_charts_stats", "modulename": "cave_utils.api.pages", "qualname": "pages_data_star_charts_stats", "kind": "class", "doc": "<p>The chart stats are located under the path <strong><code>pages.data.*.charts.stats</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.pages.pages_data_star_charts_stats.spec", "modulename": "cave_utils.api.pages", "qualname": "pages_data_star_charts_stats.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>statId</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The id corresponding to the stat to be used.</li>\n<li><strong><code>aggregationType</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The type of aggregation to apply to the stat.\n<ul>\n<li>Accepted Values:\n<ul>\n<li><code>\"sum\"</code>: Sum the values.</li>\n<li><code>\"mean\"</code>: Calculate the mean of the values.</li>\n<li><code>\"min\"</code>: Find the minimum value.</li>\n<li><code>\"max\"</code>: Find the maximum value.</li>\n<li><code>\"divisor\"</code>: Divide the values by the <code>statIdDivisor</code>.</li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>\"sum\"</code>.</li>\n</ul></li>\n</ul></li>\n<li><em>* <code>aggregationGroupingId</code></em>*: <code>[str]</code> = <code>None</code> &rarr; The id of the grouping to use for aggregation.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>This is not applicable for the following aggregationTypes ['sum', 'divisor'].</li>\n</ul></li>\n</ul></li>\n<li><em>* <code>aggregationGroupingLevel</code></em>*: <code>[str]</code> = <code>None</code> &rarr; The id of the grouping level to use for aggregation.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>This is not applicable for the following aggregationTypes ['sum', 'divisor'].</li>\n</ul></li>\n</ul></li>\n<li><strong><code>statIdDivisor</code></strong>: <code>[str]</code> = <code>\"sum\"</code> &rarr; The id of the stat to use as the divisor.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tstatId: [&lt;class &#x27;str&#x27;&gt;] = None,</span><span class=\"param\">\taggregationType: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tstatIdDivisor: [&lt;class &#x27;str&#x27;&gt;, None] = &#x27;sum&#x27;,</span><span class=\"param\">\taggregationGroupingId: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\taggregationGroupingLevel: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tdistributionType: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tdistributionYAxis: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tdistributionVariant: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.pages.pages_data_star_charts_chartOptions", "modulename": "cave_utils.api.pages", "qualname": "pages_data_star_charts_chartOptions", "kind": "class", "doc": "<p>The chart options are located under the path <strong><code>pages.data.*.charts.chartOptions</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.pages.pages_data_star_charts_chartOptions.spec", "modulename": "cave_utils.api.pages", "qualname": "pages_data_star_charts_chartOptions.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><em>* <code>leftChartType</code></em>*: <code>[str]</code> = <code>None</code> &rarr; The chart type to use for the left y-axis.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"bar\"</code>: A [bar chart][]</li>\n<li><code>\"line\"</code>: A [line chart][]</li>\n<li><code>\"cumulative_line\"</code>: A cumulative line chart</li>\n</ul></li>\n</ul></li>\n<li><em>* <code>rightChartType</code></em>*: <code>[str]</code> = <code>None</code> &rarr; The chart type to use for the right y-axis.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"bar\"</code>: A [bar chart][]</li>\n<li><code>\"line\"</code>: A [line chart][]</li>\n<li><code>\"cumulative_line\"</code>: A cumulative line chart</li>\n</ul></li>\n</ul></li>\n<li><em>* <code>cumulative</code></em>*: <code>[bool]</code> = <code>False</code> &rarr; Whether or not the chart should be cumulative.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tleftChartType: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\trightChartType: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.panes", "modulename": "cave_utils.api.panes", "kind": "module", "doc": "<p>Panes serve as main containers for UI controls such as toggles, text\nand number fields, sliders, etc. They can also contain buttons that\nfacilitate interaction with actionable data.</p>\n"}, {"fullname": "cave_utils.api.panes.panes", "modulename": "cave_utils.api.panes", "qualname": "panes", "kind": "class", "doc": "<p>The panes are located under the path <strong><code>panes</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.panes.panes.spec", "modulename": "cave_utils.api.panes", "qualname": "panes.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>data</code></strong>: <code>[str]</code> &rarr; The data to pass to <code>panes.data.*</code>.</li>\n<li><strong><code>paneState</code></strong>: <code>[dict]</code> &rarr;\n<ul>\n<li>A dictionary of pane states per their location in the <code>appBar</code> object.</li>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"left\"</code>: The state of a pane triggered from the left-side app bar.</li>\n<li><code>\"center\"</code>: The pane state of a centered modal.</li>\n<li><code>\"right\"</code>: The state of a pane triggered from the right-side app bar.</li>\n</ul></li>\n<li><strong>Note</strong>: In the vast majority of use cases, the <code>paneState</code> dictionary is not relevant to the design of the CAVE App, as its primary purpose is to store temporary UI state during user interactions. Nevertheless, a CAVE App designer has the option to prepopulate it if required.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">paneState</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.panes.panes_data_star", "modulename": "cave_utils.api.panes", "qualname": "panes_data_star", "kind": "class", "doc": "<p>The pane data is located under the path <strong><code>panes.data.*</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.panes.panes_data_star.spec", "modulename": "cave_utils.api.panes", "qualname": "panes_data_star.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>name</code></strong>: <code>[str]</code> &rarr; The name of the pane.</li>\n<li><strong><code>props</code></strong>: <code>[dict]</code> &rarr; The props that will be rendered in the pane.\n<ul>\n<li><strong>See</strong>: <code>cave_utils.api_utils.general.props</code></li>\n</ul></li>\n<li><strong><code>values</code></strong>: <code>[dict]</code> = <code>None</code> &rarr;\n<ul>\n<li>The values to be assigned to the respective props. Each value is associated with its corresponding prop based on the key name used in <code>props</code>.</li>\n<li><strong>See</strong>: <code>cave_utils.api_utils.general.values</code></li>\n</ul></li>\n<li><strong><code>layout</code></strong>: <code>[dict]</code> =<code>{\"type\": \"grid\", \"numColumns\": \"auto\", \"numRows\": \"auto\"}</code> &rarr;\n<ul>\n<li>The layout of the pane.</li>\n<li><strong>See</strong>: <code>cave_utils.api_utils.general.layout</code></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">props</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\tvalues: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\tlayout: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.panes.panes_paneState_star", "modulename": "cave_utils.api.panes", "qualname": "panes_paneState_star", "kind": "class", "doc": "<p>The pane state data is located under the path <strong><code>panes.paneState.*.*</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.panes.panes_paneState_star.spec", "modulename": "cave_utils.api.panes", "qualname": "panes_paneState_star.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>pin</code></strong>: <code>[bool]</code> = <code>False</code> &rarr; Whether or not the pane is pinned.\n<ul>\n<li><strong>Note</strong>: Only used for panes located on <code>\"left\"</code> or <code>\"right\"</code> side app bars.</li>\n</ul></li>\n<li><strong><code>type</code></strong>: <code>[str]</code> = <code>\"pane\"</code> &rarr; The context that activated the current visible pane.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"pane\"</code>: A pane triggered from the <code>\"left\"</code> or <code>\"right\"</code> side app bars.</li>\n<li><code>\"feature\"</code>: Map feature data is displayed in the <code>\"center\"</code> of the screen.</li>\n</ul></li>\n<li><strong>Note</strong>: In the vast majority of use cases, the <code>type</code> attribute is not relevant to the design of the CAVE App, as its primary purpose is to store temporary UI state during user interactions. Nevertheless, a CAVE App designer has the option to prepopulate it if required.</li>\n</ul></li>\n<li><strong><code>open</code></strong>: <code>[str | dict]</code> = <code>None</code> &rarr;\n<ul>\n<li>The id of the open pane or a dictionary containing data related to a specific datapoint of a map feature.</li>\n<li><strong>Notes</strong>:\n<ul>\n<li>In the vast majority of use cases, the <code>open</code> attribute is not relevant to the design of the CAVE App, as its primary purpose is to store temporary UI state during user interactions. Nevertheless, a CAVE App designer has the option to prepopulate it if required.</li>\n<li>For validation purposes or in advanced use cases, this attribute must correspond with the id (i.e., the dictionary key) of a pane located under <code>panes.data</code> when <code>type</code> is set to <code>\"pane\"</code>.</li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pane&#39;</span>,</span><span class=\"param\">\topen: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"n\">pin</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.settings", "modulename": "cave_utils.api.settings", "kind": "module", "doc": "<p>Configure general settings for your application like the icons to use, how to sync data with the server, and more.</p>\n"}, {"fullname": "cave_utils.api.settings.settings", "modulename": "cave_utils.api.settings", "qualname": "settings", "kind": "class", "doc": "<p>The settings are located under the path <strong><code>settings</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.settings.settings.spec", "modulename": "cave_utils.api.settings", "qualname": "settings.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>iconUrl</code></strong>: <code>[str]</code> &rarr; The URL to the icon bundle for your application.\n<ul>\n<li><strong>Example</strong>: <code>\"https://react-icons.mitcave.com/5.4.0\"</code>.</li>\n<li><strong>Notes</strong>:\n<ul>\n<li>This is the only required attribute in <code>settings</code>.</li>\n<li>See the available versions provided by the cave team here:\n<ul>\n<li><a href=\"https://react-icons.mitcave.com/versions.txt\"><a href=\"https://react-icons.mitcave.com/versions.txt\"><a href=\"https://react-icons.mitcave.com/versions.txt\"><a href=\"https://react-icons.mitcave.com/versions.txt\">https://react-icons.mitcave.com/versions.txt</a></a></a></a></li>\n</ul></li>\n<li>Once you select a version, you can see the available icons in the version icon list:\n<ul>\n<li>EG: <a href=\"https://react-icons.mitcave.com/5.4.0/icon_list.txt\"><a href=\"https://react-icons.mitcave.com/5.4.0/icon_list.txt\"><a href=\"https://react-icons.mitcave.com/5.4.0/icon_list.txt\"><a href=\"https://react-icons.mitcave.com/5.4.0/icon_list.txt\">https://react-icons.mitcave.com/5.4.0/icon_list.txt</a></a></a></a></li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li><strong><code>demo</code></strong>: <code>[dict]</code> = <code>{}</code> &rarr; Settings for the demo mode of your application.\n<ul>\n<li><strong>See</strong>: <code>settings_demo_star</code>.</li>\n</ul></li>\n<li><strong><code>sync</code></strong>: <code>[dict]</code> = <code>{}</code> &rarr; Settings for syncing data with the server.\n<ul>\n<li><strong>See</strong>: <code>settings_sync_star</code>.</li>\n</ul></li>\n<li><strong><code>time</code></strong>: <code>[dict]</code> = <code>{}</code> &rarr; Settings for the time display.\n<ul>\n<li><strong>See</strong>: <code>settings_time</code>.</li>\n</ul></li>\n<li><strong><code>defaults</code></strong>: <code>[dict]</code> = <code>{}</code> &rarr; Default settings for your application.\n<ul>\n<li><strong>See</strong>: <code>settings_defaults</code>.</li>\n</ul></li>\n<li><strong><code>debug</code></strong>: <code>[dict]</code> = <code>{}</code> &rarr; If <code>True</code>, the CAVE App client will show additional information for debugging purposes.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">iconUrl</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">demo</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">sync</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">defaults</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.settings.settings_defaults", "modulename": "cave_utils.api.settings", "qualname": "settings_defaults", "kind": "class", "doc": "<p>The defaults settings are located under the path <strong><code>settings.defaults</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.settings.settings_defaults.spec", "modulename": "cave_utils.api.settings", "qualname": "settings_defaults.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>showToolbar</code></strong>: <code>[bool]</code> = <code>True</code> &rarr; If <code>True</code>, chart toolbars will be displayed by default.</li>\n<li><strong><code>locale</code></strong>: <code>[str]</code> = <code>\"en-US\"</code> &rarr;\n<ul>\n<li>Format numeric values based on language and regional conventions.</li>\n<li><strong>Note</strong>: This attribute only applies to <code>\"num\"</code> props or <code>stats</code>.</li>\n<li><strong>See</strong>: <a href=\"https://en.wikipedia.org/wiki/IETF_language_tag\">Locale identifier</a>.</li>\n</ul></li>\n<li><strong><code>precision</code></strong>: <code>[int]</code> = <code>2</code> &rarr; The number of decimal places to display.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>Set the precision to <code>0</code> to attach an integer constraint.</li>\n<li>This attribute only applies to <code>\"num\"</code> props or <code>stats</code>.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>trailingZeros</code></strong>: <code>[bool]</code> = <code>False</code> &rarr; If <code>True</code>, trailing zeros will be displayed.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>This ensures that all precision digits are shown. For example: <code>1.5</code> &rarr; <code>1.500</code> when precision is <code>3</code>.</li>\n<li>This attribute only applies to <code>\"num\"</code> props or <code>stats</code>.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>notation</code></strong>: <code>[int]</code> = <code>\"standard\"</code> &rarr; The formatting style of a numeric value.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"standard\"</code>: Plain number formatting</li>\n<li><code>\"compact\"</code>: Resembles the <a href=\"https://en.wikipedia.org/wiki/Metric_prefix\">metric prefix</a> system</li>\n<li><code>\"scientific\"</code>: <a href=\"https://en.wikipedia.org/wiki/Scientific_notation\">Scientific notation</a></li>\n<li><code>\"engineering\"</code>: <a href=\"https://en.wikipedia.org/wiki/Engineering_notation\">Engineering notation</a></li>\n<li><code>\"precision\"</code>: Emulates the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\">Number.prototype.toPrecision</a> method</li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>If left unspecified (i.e. <code>None</code>), the prop's or stat's <code>notation</code> will be used or in case the latter is undefined, <code>settings.notation</code> will be used.</li>\n<li>This attribute only applies to <code>\"num\"</code> props or <code>stats</code>.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>notationDisplay</code></strong>: <code>[str]</code> = <code>\"e+\"</code> | <code>\"short\"</code> | <code>None</code> &rarr; Further customize the formatting within the selected <code>notation</code>.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li>When <strong><code>notation</code></strong> == <code>\"compact\"</code>:\n<ul>\n<li><code>\"short\"</code>: Add symbols <code>K</code>, <code>M</code>, <code>B</code>, and <code>T</code> (in <code>\"en-US\"</code>) to denote thousands, millions, billions, and trillions, respectively.</li>\n<li><code>\"long\"</code>: Present numeric values with the informal suffix words <code>thousand</code>, <code>million</code>, <code>billion</code>, and <code>trillion</code> (in <code>\"en-US\"</code>).</li>\n</ul></li>\n<li>When <strong><code>notation</code></strong> == <code>\"scientific\"</code>, <code>\"engineering\"</code> or <code>\"precision\"</code>:\n<ul>\n<li><code>\"e\"</code>: Exponent symbol in lowercase as per the chosen <code>locale</code> identifier</li>\n<li><code>\"e+\"</code>: Similar to <code>\"e\"</code>, but with a plus sign for positive exponents.</li>\n<li><code>\"E\"</code>: Exponent symbol in uppercase as per the chosen <code>locale</code> identifier</li>\n<li><code>\"E+\"</code>: Similar to <code>\"E\"</code>, but with a plus sign for positive exponents.</li>\n<li><code>\"x10^\"</code>: Formal scientific notation representation</li>\n<li><code>\"x10^+\"</code>: Similar to <code>\"x10^\"</code>, with a plus sign for positive exponents.</li>\n</ul></li>\n<li>When <strong><code>notation</code></strong> == <code>\"standard\"</code>:\n<ul>\n<li>No <code>notationDisplay</code> option is allowed for a <code>\"standard\"</code> notation</li>\n</ul></li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>No <code>notationDisplay</code> option is provided for a <code>\"standard\"</code> notation</li>\n<li>The options <code>\"short\"</code> and <code>\"long\"</code> are only provided for the <code>\"compact\"</code> notation</li>\n<li>The options <code>\"e\"</code>, <code>\"e+\"</code>, <code>\"E\"</code>, <code>\"E+\"</code>, <code>\"x10^\"</code>, and <code>\"x10^+\"</code> are provided for the <code>\"scientific\"</code>, <code>\"engineering\"</code> and <code>\"precision\"</code> notations</li>\n<li>If <code>None</code>, it defaults to <code>\"short\"</code> for <code>\"compact\"</code> notation, and to <code>\"e+\"</code> for <code>\"scientific\"</code>, <code>\"engineering\"</code>, or <code>\"precision\"</code> notations. For the <code>\"standard\"</code> option, the value remains <code>None</code>.</li>\n<li>This attribute only applies to <code>\"num\"</code> props or <code>stats</code>.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>fallbackValue</code></strong>: [str] = <code>\"N/A\"</code> &rarr; A value to show when a numeric value is missing or invalid.\n<ul>\n<li><strong>Note</strong>: This attribute only applies to <code>\"num\"</code> props or <code>stats</code>.</li>\n</ul></li>\n<li><strong><code>unit</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The unit to use for a prop or stat.\n<ul>\n<li><strong>Note</strong>: This attribute only applies to <code>\"num\"</code> props or <code>stats</code>.</li>\n</ul></li>\n<li><strong><code>unitPlacement</code></strong>: <code>[str]</code> = <code>\"afterWithSpace\"</code> &rarr; The position of the <code>unit</code> symbol relative to a value.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"after\"</code>: The <code>unit</code> appears after the value.</li>\n<li><code>\"afterWithSpace\"</code>: The <code>unit</code> appears after the value, separated by a space.</li>\n<li><code>\"before\"</code>: The <code>unit</code> appears before the value.</li>\n<li><code>\"beforeWithSpace\"</code>: The unit is placed before the value, with a space in between.</li>\n</ul></li>\n<li><strong>Note</strong>: This attribute only applies to <code>\"num\"</code> props or <code>stats</code>.</li>\n</ul></li>\n<li><strong><code>legendPrecision</code></strong>: <code>[int]</code> = <code>None</code> &rarr;\n<ul>\n<li>The number of decimal places to display in the Map Legend.</li>\n<li><strong>Notes</strong>:\n<ul>\n<li>Set the precision to <code>0</code> to attach an integer constraint.</li>\n<li>If left unspecified (i.e. <code>None</code>), the prop's or stat's <code>precision</code> will be used or in case the latter is undefined, <code>settings.precision</code> will be used.</li>\n<li>This attribute only applies to <code>\"num\"</code> props or <code>stats</code>.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>legendNotation</code></strong>: <code>[int]</code> = <code>\"standard\"</code> &rarr; The formatting style of a numeric value.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"standard\"</code>: Plain number formatting</li>\n<li><code>\"compact\"</code>: Resembles the <a href=\"https://en.wikipedia.org/wiki/Metric_prefix\">metric prefix</a> system</li>\n<li><code>\"scientific\"</code>: <a href=\"https://en.wikipedia.org/wiki/Scientific_notation\">Scientific notation</a></li>\n<li><code>\"engineering\"</code>: <a href=\"https://en.wikipedia.org/wiki/Engineering_notation\">Engineering notation</a></li>\n<li><code>\"precision\"</code>: Emulates the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\">Number.prototype.toPrecision</a> method</li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>If left unspecified (i.e. <code>None</code>), the prop's or stat's <code>notation</code> will be used or in case the latter is undefined, <code>settings.notation</code> will be used.</li>\n<li>This attribute only applies to <code>\"num\"</code> props or <code>stats</code>.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>legendNotationDisplay</code></strong>: <code>[str]</code> = <code>\"e+\"</code> | <code>\"short\"</code> | <code>None</code> &rarr; Further customize the formatting within the selected <code>legendNotation</code>.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"short\"</code>: Add symbols <code>K</code>, <code>M</code>, <code>B</code>, and <code>T</code> (in <code>\"en-US\"</code>) to denote thousands, millions, billions, and trillions, respectively.</li>\n<li><code>\"long\"</code>: Present numeric values with the informal suffix words <code>thousand</code>, <code>million</code>, <code>billion</code>, and <code>trillion</code> (in <code>\"en-US\"</code>).</li>\n<li><code>\"e\"</code>: Exponent symbol in lowercase as per the chosen <code>locale</code> identifier</li>\n<li><code>\"e+\"</code>: Similar to <code>\"e\"</code>, but with a plus sign for positive exponents.</li>\n<li><code>\"E\"</code>: Exponent symbol in uppercase as per the chosen <code>locale</code> identifier</li>\n<li><code>\"E+\"</code>: Similar to <code>\"E\"</code>, but with a plus sign for positive exponents.</li>\n<li><code>\"x10^\"</code>: Formal scientific notation representation</li>\n<li><code>\"x10^+\"</code>: Similar to <code>\"x10^\"</code>, with a plus sign for positive exponents.</li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>No <code>legendNotationDisplay</code> option is provided for a <code>\"standard\"</code> legend notation</li>\n<li>The options <code>\"short\"</code> and <code>\"long\"</code> are only provided for the <code>\"compact\"</code> legend notation</li>\n<li>The options <code>\"e\"</code>, <code>\"e+\"</code>, <code>\"E\"</code>, <code>\"E+\"</code>, <code>\"x10^\"</code>, and <code>\"x10^+\"</code> are provided for the <code>\"scientific\"</code>, <code>\"engineering\"</code> and <code>\"precision\"</code> legend notations</li>\n<li>If left unspecified (i.e. <code>None</code>), the prop's or stat's <code>notationDisplay</code> will be used or in case the latter is undefined, <code>settings.notationDisplay</code> will be used.</li>\n<li>This attribute only applies to <code>\"num\"</code> props or <code>stats</code>.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>legendMinLabel</code></strong>: <code>[str]</code> = <code>None</code> &rarr;\n<ul>\n<li>A custom and descriptive label in the Map Legend used to identify the lowest data point.</li>\n<li><strong>Notes</strong>:\n<ul>\n<li>Takes precedence over other formatting, except when used in a node cluster and the <code>cave_utils.api.maps.group</code> attribute is <code>True</code>. In this case, the min value within the node cluster is displayed.</li>\n<li>This attribute only applies to <code>\"num\"</code> props or <code>stats</code>.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>legendMaxLabel</code></strong>: <code>[str]</code> = <code>None</code> &rarr;\n<ul>\n<li>A custom and descriptive label in the Map Legend used to identify the highest data point.</li>\n<li><strong>Notes</strong>:\n<ul>\n<li>Takes precedence over other formatting, except when used in a node cluster and the <code>cave_utils.api.maps.group</code> attribute is <code>True</code>. In this case, the max value within the node cluster is displayed.</li>\n<li>This attribute only applies to <code>\"num\"</code> props or <code>stats</code>.</li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">showToolbar</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">locale</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;en-US&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">precision</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">trailingZeros</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\tnotation: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tnotationDisplay: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tfallbackValue: [&lt;class &#x27;str&#x27;&gt;, None] = &#x27;N/A&#x27;,</span><span class=\"param\">\tunit: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tunitPlacement: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tlegendPrecision: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tlegendNotation: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tlegendNotationDisplay: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tlegendMinLabel: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tlegendMaxLabel: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.settings.settings_demo_star", "modulename": "cave_utils.api.settings", "qualname": "settings_demo_star", "kind": "class", "doc": "<p>The demo settings are located under the path <strong><code>settings.demo</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.settings.settings_demo_star.spec", "modulename": "cave_utils.api.settings", "qualname": "settings_demo_star.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>scrollSpeed</code></strong>: <code>[int, float]</code> = <code>1</code> &rarr;\n<ul>\n<li>The speed at which the demo text will scroll, measured in degrees of rotation per frame (degrees per 13 milliseconds).</li>\n<li><strong>Note</strong>: This key only applies to <code>\"map\"</code> charts.</li>\n</ul></li>\n<li><strong><code>displayTime</code></strong>: <code>[int]</code> = <code>5</code> &rarr; The time duration in seconds to display the demo text.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tscrollSpeed: [&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;] = 1,</span><span class=\"param\">\t<span class=\"n\">displayTime</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.settings.settings_sync_star", "modulename": "cave_utils.api.settings", "qualname": "settings_sync_star", "kind": "class", "doc": "<p>The sync settings are located under the path <strong><code>settings.sync.*</code></strong>.</p>\n\n<p>By default, the each client will automatically sync all data structures with the server. This behavior can be modified using this\nAPI structure.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.settings.settings_sync_star.spec", "modulename": "cave_utils.api.settings", "qualname": "settings_sync_star.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>name</code></strong>: <code>[str]</code> &rarr; The name of the sync setting. Only for display purposes if <code>showToggle</code> is <code>True</code>.</li>\n<li><strong><code>showToggle</code></strong>: <code>[bool]</code> &rarr; If <code>True</code>, the toggle will be displayed.</li>\n<li><strong><code>value</code></strong>: <code>[bool]</code> &rarr; The initial value of the toggle.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>This value determines if the data structure is synced with the server.</li>\n<li>This value is only relevant if it is <code>False</code>, as the entire data structure is synced by default.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>data</code></strong>: <code>[dict[list[str|int]]]</code> &rarr; A set of paths that allow you to toggle syncing.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>This is a dict of lists of strings or integers.</li>\n<li>Each key is a custom key for your own organizational purposes.</li>\n<li>Each value is a list of items that make up a path to a data structure in the api.\n<ul>\n<li>Each item in the list is either a string or an integer.</li>\n</ul></li>\n<li>If the path is valid and the value is <code>False</code>, anything under that path will not be synced with the server.\n<ul>\n<li>Essentially, each client will have its own divergent copy of the data structure under that path.</li>\n</ul></li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Example</strong>:</p>\n\n<p>Allow users to not sync which pane or modal is open across clients in the same session:</p>\n\n<pre><code>\"sync: {\n    \"panes\": {\n        \"name\": \"Panes And Modals\",\n        \"showToggle\": True,\n        \"value\": False,\n        \"data\": {\n            \"ab1\": [\"panes\", \"paneState\"],\n        },\n    }\n}\n</code></pre>\n\n<ul>\n<li><strong>Note</strong>: In this example the <code>ab1</code> key is arbitrary. It is used for your own organizational purposes.</li>\n<li><strong>Note</strong>: In this example, <code>[\"panes\", \"paneState\"]</code> refers to the data structure that determines which pane or modal is open.\n<ul>\n<li>By choosing not to sync this data structure, each client can have its own divergent launched pane and launched modal state.</li>\n<li>See: <code>cave_utils.api.panes.panes_paneState_star</code> for more information on this data structure.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">showToggle</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api.settings.settings_time", "modulename": "cave_utils.api.settings", "qualname": "settings_time", "kind": "class", "doc": "<p>The time settings are located under the path <strong><code>settings.time</code></strong>.</p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api.settings.settings_time.spec", "modulename": "cave_utils.api.settings", "qualname": "settings_time.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>timeLength</code></strong>: <code>[int]</code> &rarr; The amount of time values to display.</li>\n<li><strong><code>timeUnits</code></strong>: <code>[str]</code> &rarr; The units of time to display.\n<ul>\n<li><strong>Example</strong>: <code>\"Decade\"</code>.</li>\n</ul></li>\n<li><strong><code>looping</code></strong>: <code>[bool]</code> &rarr; If <code>True</code>, the time animation will automatically restart from the beginning once it reaches the end.</li>\n<li><strong><code>speed</code></strong>: <code>[float]</code> &rarr; The speed at which the animation advances to the next time step.\n<ul>\n<li><strong>Note</strong>: While <code>speed</code> is intended to be measured in frames per second (fps), performance may degrade as the size of the time-varying data increases, resulting in slower animation.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">timeLength</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">timeUnits</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">looping</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\tspeed: [&lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;],</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api_utils", "modulename": "cave_utils.api_utils", "kind": "module", "doc": "<h2 id=\"validation\">Validation</h2>\n\n<p>This code can be used directly for validation purposes:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">cave_utils</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Validator</span>\n\n<span class=\"n\">session_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;kwargs&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;wipeExisting&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># All of your session data to validate here</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Validator</span><span class=\"p\">(</span>\n    <span class=\"n\">session_data</span><span class=\"o\">=</span><span class=\"n\">session_data</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "cave_utils.api_utils.general", "modulename": "cave_utils.api_utils.general", "kind": "module", "doc": "<p>General API Spec items that are found in multiple places. This is not a key that should be passed as part of your <code>session_data</code>.</p>\n"}, {"fullname": "cave_utils.api_utils.general.props", "modulename": "cave_utils.api_utils.general", "qualname": "props", "kind": "class", "doc": "<p></p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api_utils.general.props.spec", "modulename": "cave_utils.api_utils.general", "qualname": "props.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>name</code></strong>: <code>[str]</code> &rarr; The name of the prop.</li>\n<li><strong><code>type</code></strong>: <code>[str]</code> &rarr; The type of the prop.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"head\"</code>: A header for an individual section, containing a <code>title</code> and a <code>help</code> message</li>\n<li><code>\"num\"</code>: A numeric input field</li>\n<li><code>\"toggle\"</code>: A switch button to enable or disable a single setting</li>\n<li><code>\"button\"</code>: A regular button</li>\n<li><code>\"text\"</code>: A text input field</li>\n<li><code>\"selector\"</code>: Select options from a set</li>\n<li><code>\"date\"</code>: Select a date and/or time</li>\n<li><code>\"media\"</code>: View various media formats</li>\n<li><code>\"coordinate\"</code>: A coordinate input field</li>\n</ul></li>\n</ul></li>\n<li><strong><code>help</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The help text to display.</li>\n<li><strong><code>display</code></strong>: <code>[bool]</code> = <code>None</code> &rarr; Whether or not the prop will be displayed.</li>\n<li><strong><code>variant</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The variant of the prop.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li>When <strong><code>type</code></strong> == <code>\"head\"</code>:\n<ul>\n<li><code>\"column\"</code>: A header for a column of related prop items</li>\n<li><code>\"row\"</code>: A header for a row of related prop items</li>\n<li><code>\"icon\"</code>: Same as <code>\"column\"</code>, accompanied by a related icon.</li>\n<li><code>\"iconRow\"</code>: Same as <code>\"row\"</code>, accompanied by a related icon.</li>\n</ul></li>\n<li>When <strong><code>type</code></strong> == <code>\"text\"</code>:\n<ul>\n<li><code>\"single\"</code>: A single-line text input field</li>\n<li><code>\"textarea\"</code>: A multi-line text input field</li>\n</ul></li>\n<li>When <strong><code>type</code></strong> == <code>\"num\"</code>:\n<ul>\n<li><code>\"field\"</code>: A numeric input field</li>\n<li><code>\"slider\"</code>: A range of values along a bar, from which users may select a single value</li>\n<li><code>\"icon\"</code>: A fixed numerical value presented alongside a corresponding icon.</li>\n<li><code>\"iconCompact\"</code>: Similar to <code>\"icon\"</code>, but designed in a compact format for appropriate rendering within a draggable pad.</li>\n<li><code>\"incslider\"</code>: A range of values along a bar, from which users may select a single value, with a predefined set of options.</li>\n</ul></li>\n<li>When <strong><code>type</code></strong> == <code>\"selector\"</code>:\n<ul>\n<li><code>\"checkbox\"</code>: Select one or more items from a set of checkboxes</li>\n<li><code>\"combobox\"</code>: A dropdown with a search bar allowing users to filter and select a single option by typing</li>\n<li><code>\"comboboxMulti\"</code>: A dropdown with a search bar, enabling users to filter and select multiple options. Selected items are displayed as tags within the input field.</li>\n<li><code>\"dropdown\"</code>: Show multiple options that appear when the element is clicked</li>\n<li><code>\"nested\"</code>: Select one or more options from a set of nested checkboxes</li>\n<li><code>\"radio\"</code>: Select one option from a set of mutually exclusive options</li>\n<li><code>\"hradio\"</code>: A set of <code>\"radio\"</code>s placed horizontally</li>\n<li><code>\"hstepper\"</code>: Select a unique option along a horizontal slider</li>\n<li><code>\"vstepper\"</code>: Select a unique option along a vertical slider</li>\n</ul></li>\n<li>When <strong><code>type</code></strong> == <code>\"date\"</code>:\n<ul>\n<li><code>\"date\"</code>: Select a date via a calendar pop-up that appears when the element is clicked (default)\n<ul>\n<li><strong>Note</strong>: Passed as <code>YYYY-MM-DD</code></li>\n</ul></li>\n<li><code>\"time\"</code>: Select a time via a clock pop-up that appears when the element is clicked\n<ul>\n<li><strong>Note</strong>: Passed as <code>HH:MM:SS</code></li>\n</ul></li>\n<li><code>\"datetime\"</code>: Select date and time via a pop-up with calendar and clock tabs that appear when the element is clicked\n<ul>\n<li><strong>Note</strong>: Passed as <code>YYYY-MM-DDTHH:MM:SS</code></li>\n</ul></li>\n</ul></li>\n<li>When <strong><code>type</code></strong> == <code>\"media\"</code>:\n<ul>\n<li><code>\"picture\"</code>: Show a PNG or JPG image</li>\n<li><code>\"video\"</code>: Display a YouTube, Vimeo, or Dailymotion video clip</li>\n</ul></li>\n<li>When <strong><code>type</code></strong> == <code>\"coordinate\"</code>:\n<ul>\n<li><code>\"latLngInput\"</code>: A latitude and longitude input field</li>\n<li><code>\"latLngMap\"</code>: A clickable map to select a latitude and longitude</li>\n<li><code>\"latLngPath\"</code>: A clickable map to select a path of latitude and longitude points</li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li><strong><code>container</code></strong>: <code>[str]</code> = <code>\"vertical\"</code> | <code>\"none\"</code> &rarr;\n<ul>\n<li>Specifies the type of prop container by selecting from predefined styles.</li>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"vertical\"</code>: A vertical layout where the prop <code>name</code> appears at the top inside the container.</li>\n<li><code>\"horizontal\"</code>: A horizontal layout where the prop <code>name</code> is on the left, followed by the actionable prop on the right.</li>\n<li><code>\"titled\"</code>: Similar to the vertical container but without a background color, removing the embossed appearance of the prop.</li>\n<li><code>\"untitled\"</code>: A slim container version without the prop <code>name</code> or <code>unit</code> label.</li>\n<li><code>\"none\"</code>: Removes the prop container entirely, disabling the display of the prop <code>name</code>, <code>help</code> button and <code>unit</code> label. Only the actionable prop is displayed.</li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>This attribute applies to all props except the <code>\"icon\"</code> and <code>\"iconCompact\"</code> variants of the <code>\"num\"</code> prop.</li>\n<li>If left unspecified (i.e., <code>None</code>), the default is <code>\"none\"</code> for <code>\"head\"</code> props, and <code>\"vertical\"</code> for all others. As stated, the <code>\"icon\"</code> and <code>\"iconCompact\"</code> variants of the <code>\"num\"</code> prop are always set to <code>\"none\"</code>, regardless of this attribute.</li>\n<li>When the container is set to <code>\"none\"</code>, the <code>style</code> prop used at the <code>\"item\"</code> level of the <code>layout</code> becomes ineffective.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>enabled</code></strong>: <code>[bool]</code> = <code>True</code> &rarr; Whether or not the prop will be enabled.\n<ul>\n<li><strong>Note</strong>: This attribute applies to all props except <code>\"head\"</code> props.</li>\n</ul></li>\n<li><strong><code>apiCommand</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The name of the API command to trigger.\n<ul>\n<li><strong>Note</strong>: If <code>None</code>, no <code>apiCommand</code> is triggered.</li>\n<li><strong>Note</strong>: This attribute applies to all props except <code>\"head\"</code> props.</li>\n</ul></li>\n<li><strong><code>apiCommandKeys</code></strong>: <code>[list[str]]</code> = <code>None</code> &rarr;\n<ul>\n<li>The root API keys to pass to your <code>execute_command</code> function if an <code>apiCommand</code> is provided.</li>\n<li><strong>Note</strong>: If <code>None</code>, all API keys are passed to your <code>execute_command</code>.</li>\n<li><strong>Note</strong>: This attribute applies to all props except <code>\"head\"</code> props.</li>\n</ul></li>\n<li><strong><code>icon</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The icon to use for the prop.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>It must be a valid icon name from the <a href=\"https://react-icons.github.io/react-icons/search\">react-icons</a> bundle, preceded by the abbreviated name of the icon library source.</li>\n<li>This attribute applies exclusively to <code>\"head\"</code> props.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>options</code></strong>: <code>[dict]</code> = <code>None</code> &rarr;\n<ul>\n<li>The options to be displayed on the UI element mapped to their display properties.</li>\n<li><strong>Notes</strong>:\n<ul>\n<li>Only options provided here are valid for the prop value</li>\n<li>This attribute applies to only <code>\"selector\"</code> props</li>\n</ul></li>\n</ul></li>\n<li><strong><code>numVisibleTags</code></strong>: <code>[int]</code> = <code>None</code> &rarr;\n<ul>\n<li>The maximum number of tags visible in a <code>\"comboboxMulti\"</code> variant of a <code>\"selector\"</code> prop when it is not focused.</li>\n<li><strong>Notes</strong>:\n<ul>\n<li>If <code>None</code>, all tags will be displayed</li>\n<li>This attribute applies exclusively to <code>\"selector\"</code> props using the <code>\"comboboxMulti\"</code> variant</li>\n</ul></li>\n</ul></li>\n<li><strong><code>valueOptions</code></strong>: <code>[list[int|float]]</code> = <code>None</code> &rarr;\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>Only valueOptions provided here can be selected for the prop value</li>\n<li>This attribute applies to <code>\"num\"</code> props with the <code>\"incslider\"</code> variant.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>label</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The label to display above the input field when the prop is focused.\n<ul>\n<li><strong>Note</strong>: This attribute applies to <code>\"num\"</code>, <code>\"text\"</code>, and <code>\"coordinate\"</code> props.</li>\n</ul></li>\n<li><strong><code>placeholder</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The placeholder text to display.\n<ul>\n<li><strong>Note</strong>: This attribute applies exclusively to <code>\"text\"</code> props.</li>\n</ul></li>\n<li><strong><code>maxValue</code></strong>: <code>[float | int]</code> = <code>None</code> &rarr; The maximum value for the prop.\n<ul>\n<li><strong>Note</strong>: This attribute applies exclusively to <code>\"num\"</code> props.</li>\n</ul></li>\n<li><strong><code>minValue</code></strong>: <code>[float | int]</code> = <code>None</code> &rarr; The minimum value for the prop.\n<ul>\n<li><strong>Note</strong>: This attribute applies exclusively to <code>\"num\"</code> props.</li>\n</ul></li>\n<li><strong><code>gradient</code></strong>: <code>[dict]</code> = <code>None</code> &rarr; The gradient to apply to the prop.\n<ul>\n<li><strong>Note</strong>: See the <code>props_gradient</code> function for more information.</li>\n</ul></li>\n<li><strong><code>fallback</code></strong>: <code>[dict]</code> = <code>None</code> &rarr; The fallback dict for color and sizing props with missing or invalid values.\n<ul>\n<li><strong>Note</strong>: See the <code>props_fallback</code> function for more information.</li>\n</ul></li>\n<li><strong><code>maxRows</code></strong>: <code>[int]</code> = <code>None</code> &rarr;\n<ul>\n<li>The maximum number of rows to show for a <code>\"textarea\"</code> variant.</li>\n<li><strong>Note</strong>: This attribute applies exclusively to <code>\"text\"</code> props.</li>\n</ul></li>\n<li><strong><code>minRows</code></strong>: <code>[int]</code> = <code>None</code> &rarr;\n<ul>\n<li>The minimum number of rows to show for a <code>\"textarea\"</code> variant.</li>\n<li><strong>Note</strong>: This attribute applies exclusively to <code>\"text\"</code> props.</li>\n</ul></li>\n<li><strong><code>rows</code></strong>: <code>[int]</code> = <code>None</code> &rarr;\n<ul>\n<li>The fixed number of rows to show for a <code>\"textarea\"</code> variant.</li>\n<li><strong>Note</strong>: This attribute applies exclusively to <code>\"text\"</code> props.</li>\n</ul></li>\n<li><strong><code>views</code></strong>: <code>[list[str]]</code> &rarr;\n<ul>\n<li>The available time units for the represented date and/or time.</li>\n<li><strong>Default Value</strong>:\n<ul>\n<li>When <strong><code>variant</code></strong> == <code>\"date\"</code>: <code>[\"year\", \"day\"]</code></li>\n<li>When <strong><code>variant</code></strong> == <code>\"time\"</code>: <code>[\"hours\", \"minutes\"]</code></li>\n<li>When <strong><code>variant</code></strong> == <code>\"datetime\"</code>: <code>[\"year\", \"day\", \"hours\", \"minutes\"]</code></li>\n</ul></li>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li>When <strong><code>variant</code></strong> == <code>\"date\"</code>:\n<ul>\n<li><code>\"year\"</code>: The year view</li>\n<li><code>\"month\"</code>: The month view</li>\n<li><code>\"day\"</code>: The day view</li>\n</ul></li>\n<li>When <strong><code>variant</code></strong> == <code>\"time\"</code>:\n<ul>\n<li><code>\"hours\"</code>: The hours view</li>\n<li><code>\"minutes\"</code>: The minutes view</li>\n<li><code>\"seconds\"</code>: The seconds view</li>\n</ul></li>\n<li>When <strong><code>variant</code></strong> == <code>\"datetime\"</code>:\n<ul>\n<li><code>\"year\"</code>: The year view</li>\n<li><code>\"month\"</code>: The month view</li>\n<li><code>\"day\"</code>: The day view</li>\n<li><code>\"hours\"</code>: The hours view</li>\n<li><code>\"minutes\"</code>: The minutes view</li>\n<li><code>\"seconds\"</code>: The seconds view</li>\n</ul></li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>The views will be presented in the order specified in the <code>views</code> array.</li>\n<li>This attribute applies exclusively to <code>\"date\"</code> props.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>locale</code></strong>: <code>[str]</code> = <code>None</code> &rarr;\n<ul>\n<li>Format numeric values based on language and regional conventions.</li>\n<li><strong>Notes</strong>:\n<ul>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.locale</code>.</li>\n<li>This attribute applies exclusively to <code>\"num\"</code> props.</li>\n</ul></li>\n<li><strong>See</strong>: [Locale identifier][].</li>\n</ul></li>\n<li><strong><code>precision</code></strong>: <code>[int]</code> = <code>None</code> &rarr; The number of decimal places to display.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>Set the precision to <code>0</code> to attach an integer constraint.</li>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.precision</code>.</li>\n<li>This attribute applies exclusively to <code>\"num\"</code> props.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>trailingZeros</code></strong>: <code>[bool]</code> = <code>None</code> &rarr; If <code>True</code>, trailing zeros will be displayed.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>This ensures that all precision digits are shown. For example: <code>1.5</code> &rarr; <code>1.500</code> when precision is <code>3</code>.</li>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.trailingZeros</code>.</li>\n<li>This attribute applies exclusively to <code>\"num\"</code> props.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>fallbackValue</code></strong>: [str] = <code>None</code> &rarr; A value to show when the value is missing or invalid.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>This is only for display purposes as related to number formatting. It does not affect the actual value or any computations.\n<ul>\n<li>For example, if the value passed is <code>None</code>, the fallback value will be displayed instead.</li>\n</ul></li>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.fallbackValue</code>.</li>\n<li>This attribute applies exclusively to <code>\"num\"</code> props.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>unit</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The unit to use for the prop.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.unit</code>.</li>\n<li>This attribute applies exclusively to <code>\"num\"</code> props.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>unitPlacement</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The position of the <code>unit</code> symbol relative to the value.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"after\"</code>: The <code>unit</code> appears after the value.</li>\n<li><code>\"afterWithSpace\"</code>: The <code>unit</code> appears after the value, separated by a space.</li>\n<li><code>\"before\"</code>: The <code>unit</code> appears before the value.</li>\n<li><code>\"beforeWithSpace\"</code>: The unit is placed before the value, with a space in between.</li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.unitPlacement</code>.</li>\n<li>This attribute applies exclusively to <code>\"num\"</code> props.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>notation</code></strong>: <code>[str]</code> = <code>\"standard\"</code> &rarr; The formatting style of a numeric value.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"standard\"</code>: Plain number formatting</li>\n<li><code>\"compact\"</code>: Resembles the <a href=\"https://en.wikipedia.org/wiki/Metric_prefix\">metric prefix</a> system</li>\n<li><code>\"scientific\"</code>: <a href=\"https://en.wikipedia.org/wiki/Scientific_notation\">Scientific notation</a></li>\n<li><code>\"engineering\"</code>: <a href=\"https://en.wikipedia.org/wiki/Engineering_notation\">Engineering notation</a></li>\n<li><code>\"precision\"</code>: Emulates the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\">Number.prototype.toPrecision</a> method</li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.notation</code>.</li>\n<li>This attribute applies exclusively to <code>\"num\"</code> props.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>notationDisplay</code></strong>: <code>[str]</code> = <code>\"e+\"</code> | <code>\"short\"</code> &rarr; Further customize the formatting within the selected <code>notation</code>.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li>When <strong><code>notation</code></strong> == <code>\"compact\"</code>:\n<ul>\n<li><code>\"short\"</code>: Add symbols <code>K</code>, <code>M</code>, <code>B</code>, and <code>T</code> (in <code>\"en-US\"</code>) to denote thousands, millions, billions, and trillions, respectively.</li>\n<li><code>\"long\"</code>: Present numeric values with the informal suffix words <code>thousand</code>, <code>million</code>, <code>billion</code>, and <code>trillion</code> (in <code>\"en-US\"</code>).</li>\n</ul></li>\n<li>When <strong><code>notation</code></strong> == <code>\"scientific\"</code>, <code>\"engineering\"</code> or <code>\"precision\"</code>:\n<ul>\n<li><code>\"e\"</code>: Exponent symbol in lowercase as per the chosen <code>locale</code> identifier</li>\n<li><code>\"e+\"</code>: Similar to <code>\"e\"</code>, but with a plus sign for positive exponents.</li>\n<li><code>\"E\"</code>: Exponent symbol in uppercase as per the chosen <code>locale</code> identifier</li>\n<li><code>\"E+\"</code>: Similar to <code>\"E\"</code>, but with a plus sign for positive exponents.</li>\n<li><code>\"x10^\"</code>: Formal scientific notation representation</li>\n<li><code>\"x10^+\"</code>: Similar to <code>\"x10^\"</code>, with a plus sign for positive exponents.</li>\n</ul></li>\n<li>When <strong><code>notation</code></strong> == <code>\"standard\"</code>:\n<ul>\n<li>No <code>notationDisplay</code> option is allowed for a <code>\"standard\"</code> notation</li>\n</ul></li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>No <code>notationDisplay</code> option is provided for a <code>\"standard\"</code> notation</li>\n<li>The options <code>\"short\"</code> and <code>\"long\"</code> are only provided for the <code>\"compact\"</code> notation</li>\n<li>The options <code>\"e\"</code>, <code>\"e+\"</code>, <code>\"E\"</code>, <code>\"E+\"</code>, <code>\"x10^\"</code>, and <code>\"x10^+\"</code> are provided for the <code>\"scientific\"</code>, <code>\"engineering\"</code> and <code>\"precision\"</code> notations</li>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.notationDisplay</code>.</li>\n<li>This attribute applies exclusively to <code>\"num\"</code> props.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>legendPrecision</code></strong>: <code>[int]</code> = <code>None</code> &rarr;\n<ul>\n<li>The number of decimal places to display in the Map Legend.</li>\n<li><strong>Notes</strong>:\n<ul>\n<li>Set the precision to <code>0</code> to attach an integer constraint.</li>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.legendPrecision</code>.</li>\n<li>This attribute applies exclusively to <code>\"num\"</code> props.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>legendNotation</code></strong>: <code>[int]</code> = <code>\"standard\"</code> &rarr; The formatting style of a numeric value.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"standard\"</code>: Plain number formatting</li>\n<li><code>\"compact\"</code>: Resembles the <a href=\"https://en.wikipedia.org/wiki/Metric_prefix\">metric prefix</a> system</li>\n<li><code>\"scientific\"</code>: <a href=\"https://en.wikipedia.org/wiki/Scientific_notation\">Scientific notation</a></li>\n<li><code>\"engineering\"</code>: <a href=\"https://en.wikipedia.org/wiki/Engineering_notation\">Engineering notation</a></li>\n<li><code>\"precision\"</code>: Emulates the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\">Number.prototype.toPrecision</a> method</li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.legendNotation</code>.</li>\n<li>This attribute applies exclusively to <code>\"num\"</code> props.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>legendNotationDisplay</code></strong>: <code>[str]</code> = <code>\"e+\"</code> | <code>\"short\"</code> &rarr; Further customize the formatting within the selected <code>legendNotation</code>.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"short\"</code>: Add symbols <code>K</code>, <code>M</code>, <code>B</code>, and <code>T</code> (in <code>\"en-US\"</code>) to denote thousands, millions, billions, and trillions, respectively.</li>\n<li><code>\"long\"</code>: Present numeric values with the informal suffix words <code>thousand</code>, <code>million</code>, <code>billion</code>, and <code>trillion</code> (in <code>\"en-US\"</code>).</li>\n<li><code>\"e\"</code>: Exponent symbol in lowercase as per the chosen <code>locale</code> identifier</li>\n<li><code>\"e+\"</code>: Similar to <code>\"e\"</code>, but with a plus sign for positive exponents.</li>\n<li><code>\"E\"</code>: Exponent symbol in uppercase as per the chosen <code>locale</code> identifier</li>\n<li><code>\"E+\"</code>: Similar to <code>\"E\"</code>, but with a plus sign for positive exponents.</li>\n<li><code>\"x10^\"</code>: Formal scientific notation representation</li>\n<li><code>\"x10^+\"</code>: Similar to <code>\"x10^\"</code>, with a plus sign for positive exponents.</li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>No <code>legendNotationDisplay</code> option is provided for a <code>\"standard\"</code> legend notation</li>\n<li>The options <code>\"short\"</code> and <code>\"long\"</code> are only provided for the <code>\"compact\"</code> legend notation</li>\n<li>The options <code>\"e\"</code>, <code>\"e+\"</code>, <code>\"E\"</code>, <code>\"E+\"</code>, <code>\"x10^\"</code>, and <code>\"x10^+\"</code> are provided for the <code>\"scientific\"</code>, <code>\"engineering\"</code> and <code>\"precision\"</code> notations</li>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.legendNotationDisplay</code>.</li>\n<li>This attribute applies exclusively to <code>\"num\"</code> props.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>legendMinLabel</code></strong>: <code>[str]</code> = <code>None</code> &rarr;\n<ul>\n<li>A custom and descriptive label in the Map Legend used to identify the lowest data point.</li>\n<li><strong>Notes</strong>:\n<ul>\n<li>Takes precedence over other formatting, except when used in a node cluster and the <code>cave_utils.api.maps.group</code> attribute is <code>True</code>. In this case, the min value within the node cluster is displayed.</li>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.legendMinLabel</code>.</li>\n<li>This attribute applies exclusively to <code>\"num\"</code> props.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>legendMaxLabel</code></strong>: <code>[str]</code> = <code>None</code> &rarr;\n<ul>\n<li>A custom and descriptive label in the Map Legend used to identify the highest data point.</li>\n<li><strong>Notes</strong>:\n<ul>\n<li>Takes precedence over other formatting, except when used in a node cluster and the <code>cave_utils.api.maps.group</code> attribute is <code>True</code>. In this case, the max value within the node cluster is displayed.</li>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.legendMaxLabel</code>.</li>\n<li>This attribute applies exclusively to <code>\"num\"</code> props.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>draggable</code></strong>: <code>[bool]</code> = <code>None</code> &rarr;\n<ul>\n<li>If <code>True</code>, the prop will be rendered within the draggable global outputs pad.</li>\n<li><strong>Notes</strong>:\n<ul>\n<li>The prop's <code>variant</code> is enforced to <code>iconCompact</code> to accommodate it within the draggable pad.</li>\n<li>This attribute applies exclusively to <code>\"num\"</code> props defined within <code>cave_utils.api.globalOutputs</code>.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>allowNone</code></strong>: <code>[bool]</code> = <code>False</code> &rarr;\n<ul>\n<li>Whether or not to allow <code>None</code> as a valid value for the prop. This is primarily used to help when validating <code>values</code> and <code>valueLists</code>.</li>\n<li><strong>Notes</strong>:\n<ul>\n<li>If <code>True</code>, <code>None</code> will be a valid value for the prop.\n<ul>\n<li><code>None</code> values will be treated differently in the front end\n<ul>\n<li>For map display purposes: <code>None</code> values will be shown as a different color or ignored.\n<ul>\n<li>See <code>nullColor</code> in: <code>/cave_utils/cave_utils/api/maps.html#colorByOptions</code></li>\n</ul></li>\n<li>For prop purposes: <code>None</code> values will be left blank.</li>\n</ul></li>\n</ul></li>\n<li>If <code>False</code>, <code>None</code> will not be a valid value for the prop.</li>\n<li>This attribute applies to all props except <code>\"head\"</code> props.</li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\thelp: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tvariant: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tdisplay: [&lt;class &#x27;bool&#x27;&gt;, None] = None,</span><span class=\"param\">\tenabled: [&lt;class &#x27;bool&#x27;&gt;, None] = None,</span><span class=\"param\">\tcontainer: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tapiCommand: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"n\">apiCommandKeys</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\toptions: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"n\">valueOptions</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\tlabel: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tplaceholder: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tmaxValue: [&lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, None] = None,</span><span class=\"param\">\tminValue: [&lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, None] = None,</span><span class=\"param\">\tgradient: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\tfallback: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\tmaxRows: [&lt;class &#x27;int&#x27;&gt;, None] = None,</span><span class=\"param\">\tminRows: [&lt;class &#x27;int&#x27;&gt;, None] = None,</span><span class=\"param\">\trows: [&lt;class &#x27;int&#x27;&gt;, None] = None,</span><span class=\"param\">\tnotation: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tprecision: [&lt;class &#x27;int&#x27;&gt;, None] = None,</span><span class=\"param\">\tnotationDisplay: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tunit: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tunitPlacement: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"n\">views</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\tlegendNotation: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tlegendPrecision: [&lt;class &#x27;int&#x27;&gt;, None] = None,</span><span class=\"param\">\tlegendNotationDisplay: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tlegendMinLabel: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tlegendMaxLabel: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\ticon: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\ttrailingZeros: [&lt;class &#x27;bool&#x27;&gt;, None] = None,</span><span class=\"param\">\tlocale: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tfallbackValue: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tdraggable: [&lt;class &#x27;bool&#x27;&gt;, None] = None,</span><span class=\"param\">\tallowNone: [&lt;class &#x27;bool&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api_utils.general.props_options", "modulename": "cave_utils.api_utils.general", "qualname": "props_options", "kind": "class", "doc": "<p></p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api_utils.general.props_options.spec", "modulename": "cave_utils.api_utils.general", "qualname": "props_options.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>name</code></strong>: <code>[str]</code> &rarr; The name of the option.</li>\n<li><strong><code>path</code></strong>: <code>[list[str]]</code> = <code>None</code> &rarr; The path to an option.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>If <code>None</code>, the option will not be selectable</li>\n<li>This attribute applies exclusively to <code>\"nested\"</code> props</li>\n</ul></li>\n</ul></li>\n<li><strong><code>color</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The color to use for this option.\n<ul>\n<li><strong>Note</strong>: A valid color string (EG: \"RGBA(0,0,0,1)\")</li>\n</ul></li>\n<li><strong><code>size</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The size to use for this option.\n<ul>\n<li><strong>Note</strong>: A valid size string (EG: \"5px\")</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\tcolor: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tsize: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api_utils.general.props_fallback", "modulename": "cave_utils.api_utils.general", "qualname": "props_fallback", "kind": "class", "doc": "<p></p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api_utils.general.props_fallback.spec", "modulename": "cave_utils.api_utils.general", "qualname": "props_fallback.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>name</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The name of the fallback.</li>\n<li><strong><code>color</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The color to use for this fallback.\n<ul>\n<li><strong>Note</strong>: A valid color string (EG: \"RGBA(0,0,0,1)\")</li>\n</ul></li>\n<li><strong><code>size</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The size to use for this fallback.\n<ul>\n<li><strong>Note</strong>: A valid size string (EG: \"5px\")</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tname: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tcolor: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tsize: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api_utils.general.props_gradient", "modulename": "cave_utils.api_utils.general", "qualname": "props_gradient", "kind": "class", "doc": "<p></p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api_utils.general.props_gradient.spec", "modulename": "cave_utils.api_utils.general", "qualname": "props_gradient.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>scale</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The scale to use for the gradient.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"linear\"</code>: A linear gradient</li>\n<li><code>\"log\"</code>: A logarithmic gradient</li>\n<li><code>\"pow\"</code>: A power gradient</li>\n<li><code>\"step\"</code>: A step gradient</li>\n</ul></li>\n</ul></li>\n<li><strong><code>scaleParams</code></strong>: <code>[dict]</code> = <code>None</code> &rarr; The parameters for the scale.\n<ul>\n<li><strong>Note</strong>: See <code>props_gradient_scaleParams</code> for more information.</li>\n</ul></li>\n<li><strong><code>notation</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The notation to use for the gradient.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"standard\"</code>: Plain number formatting</li>\n<li><code>\"compact\"</code>: Resembles the [metric prefix][] system</li>\n<li><code>\"scientific\"</code>: [Scientific notation][]</li>\n<li><code>\"engineering\"</code>: [Engineering notation][]</li>\n<li><code>\"precision\"</code>: Emulates the [Number.prototype.toPrecision][] method</li>\n</ul></li>\n</ul></li>\n<li><strong><code>notationDisplay</code></strong>: <code>[str]</code> = <code>\"e+\"</code> | <code>\"short\"</code> &rarr; Further customize the formatting within the selected <code>notation</code> when shown next to the gradient.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li>When <strong><code>notation</code></strong> == <code>\"compact\"</code>:\n<ul>\n<li><code>\"short\"</code>: Add symbols <code>K</code>, <code>M</code>, <code>B</code>, and <code>T</code> (in <code>\"en-US\"</code>) to denote thousands, millions, billions, and trillions, respectively.</li>\n<li><code>\"long\"</code>: Present numeric values with the informal suffix words <code>thousand</code>, <code>million</code>, <code>billion</code>, and <code>trillion</code> (in <code>\"en-US\"</code>).</li>\n</ul></li>\n<li>When <strong><code>notation</code></strong> == <code>\"scientific\"</code>, <code>\"engineering\"</code> or <code>\"precision\"</code>:\n<ul>\n<li><code>\"e\"</code>: Exponent symbol in lowercase as per the chosen <code>locale</code> identifier</li>\n<li><code>\"e+\"</code>: Similar to <code>\"e\"</code>, but with a plus sign for positive exponents.</li>\n<li><code>\"E\"</code>: Exponent symbol in uppercase as per the chosen <code>locale</code> identifier</li>\n<li><code>\"E+\"</code>: Similar to <code>\"E\"</code>, but with a plus sign for positive exponents.</li>\n<li><code>\"x10^\"</code>: Formal scientific notation representation</li>\n<li><code>\"x10^+\"</code>: Similar to <code>\"x10^\"</code>, with a plus sign for positive exponents.</li>\n</ul></li>\n<li>When <strong><code>notation</code></strong> == <code>\"standard\"</code>:\n<ul>\n<li>No <code>notationDisplay</code> option is allowed for a <code>\"standard\"</code> notation</li>\n</ul></li>\n</ul></li>\n<li><strong>Notes</strong>:\n<ul>\n<li>If left unspecified (i.e., <code>None</code>), it will default to <code>settings.defaults.notationDisplay</code>.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>precision</code></strong>: <code>[int]</code> = <code>None</code> &rarr; The number of decimal places to display next to the gradient.</li>\n<li><strong><code>data</code></strong>: <code>[list]</code> = <code>None</code> &rarr; The data for the gradient as a list of dicts.\n<ul>\n<li><strong>Note</strong>: See <code>props_gradient_data</code> for more information.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tscale: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tscaleParams: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\tnotation: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tnotationDisplay: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tprecision: [&lt;class &#x27;int&#x27;&gt;, None] = None,</span><span class=\"param\">\tdata: [&lt;class &#x27;list&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api_utils.general.props_gradient_scaleParams", "modulename": "cave_utils.api_utils.general", "qualname": "props_gradient_scaleParams", "kind": "class", "doc": "<p></p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api_utils.general.props_gradient_scaleParams.spec", "modulename": "cave_utils.api_utils.general", "qualname": "props_gradient_scaleParams.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>exponent</code></strong>: <code>[float]</code> = <code>None</code> &rarr; The exponent for the scale if using a power gradient.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\">exponent: [&lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, None] = None, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api_utils.general.props_gradient_data", "modulename": "cave_utils.api_utils.general", "qualname": "props_gradient_data", "kind": "class", "doc": "<p></p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api_utils.general.props_gradient_data.spec", "modulename": "cave_utils.api_utils.general", "qualname": "props_gradient_data.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>value</code></strong>: <code>[int | float]</code> &rarr; The value for the split point in the gradient.</li>\n<li><strong><code>color</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The color string to use for the split point.\n<ul>\n<li><strong>Note</strong>: A valid color string (EG: \"RGBA(0,0,0,1)\")</li>\n</ul></li>\n<li><strong><code>size</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The size string to use for the split point.\n<ul>\n<li><strong>Note</strong>: A valid size string (EG: \"5px\")</li>\n</ul></li>\n<li><strong><code>label</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The label to use for the split point.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tvalue: [&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;],</span><span class=\"param\">\tcolor: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tsize: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tlabel: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api_utils.general.layout", "modulename": "cave_utils.api_utils.general", "qualname": "layout", "kind": "class", "doc": "<p></p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api_utils.general.layout.spec", "modulename": "cave_utils.api_utils.general", "qualname": "layout.spec", "kind": "function", "doc": "<p>Arguments:</p>\n\n<ul>\n<li><strong><code>type</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The type of the layout.\n<ul>\n<li><strong>Accepted Values</strong>:\n<ul>\n<li><code>\"grid\"</code>: A layout element that can contain other layout elements.</li>\n<li><code>\"item\"</code>: A layout element where a prop is located.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>numColumns</code></strong>: <code>[str | int]</code> = <code>\"auto\"</code> &rarr; The number of columns for the grid layout.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>If <code>\"auto\"</code>, the number of columns will be calculated based on the number of items.</li>\n<li>This attribute applies exclusively to <code>\"grid\"</code> layouts.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>numRows</code></strong>: <code>[str | int]</code> = <code>\"auto\"</code> &rarr; The number of rows for the grid layout.\n<ul>\n<li><strong>Notes</strong>:\n<ul>\n<li>If <code>\"auto\"</code>, the number of rows will be calculated based on the number of items.</li>\n<li>This attribute applies exclusively to <code>\"grid\"</code> layouts.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>data</code></strong>: <code>[dict]</code> = <code>None</code> &rarr; The data for the layout.\n<ul>\n<li><strong>Note</strong>: This attribute applies exclusively to <code>\"grid\"</code> layouts.</li>\n</ul></li>\n<li><strong><code>itemId</code></strong>: <code>[str]</code> = <code>None</code> &rarr; The id of the prop placed in the layout\n<ul>\n<li><strong>Note</strong>: This attribute applies exclusively to <code>\"item\"</code> layouts.</li>\n</ul></li>\n<li><strong><code>column</code></strong>: <code>[int]</code> = <code>None</code> &rarr; The column in which to place the prop in the current grid.</li>\n<li><strong><code>row</code></strong>: <code>[int]</code> = <code>None</code> &rarr; The row in which to place the prop in the current grid.</li>\n<li><strong><code>style</code></strong>: <code>[dict | None]</code> = <code>None</code> &rarr; Provides an escape hatch for specifying CSS rules.\n<ul>\n<li><strong>Note</strong>: In <code>\"item\"</code> layouts, the <code>style</code> is applied to the root of the prop container, while in <code>\"grid\"</code> layouts, it targets the CSS Grid layout level.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\tnumColumns: [&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, None] = None,</span><span class=\"param\">\tnumRows: [&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, None] = None,</span><span class=\"param\">\tdata: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\titemId: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tcolumn: [&lt;class &#x27;int&#x27;&gt;, None] = None,</span><span class=\"param\">\trow: [&lt;class &#x27;int&#x27;&gt;, None] = None,</span><span class=\"param\">\tstyle: [&lt;class &#x27;dict&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api_utils.general.values", "modulename": "cave_utils.api_utils.general", "qualname": "values", "kind": "class", "doc": "<p></p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api_utils.general.values.spec", "modulename": "cave_utils.api_utils.general", "qualname": "values.spec", "kind": "function", "doc": "<p>Accepts all arbitrary values depending on what you have in your props as part of the API spec.</p>\n\n<p>The values you pass will be validated against the props in your API spec.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api_utils.general.valueLists", "modulename": "cave_utils.api_utils.general", "qualname": "valueLists", "kind": "class", "doc": "<p></p>\n", "bases": "cave_utils.api_utils.validator_utils.ApiValidator"}, {"fullname": "cave_utils.api_utils.general.valueLists.spec", "modulename": "cave_utils.api_utils.general", "qualname": "valueLists.spec", "kind": "function", "doc": "<p>Accepts all arbitrary values depending on what you have in your props as part of the API spec.</p>\n\n<p>The valueLists you pass will be validated against the <code>props</code> from your API spec.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api_utils.validator", "modulename": "cave_utils.api_utils.validator", "kind": "module", "doc": "<p>This module contains the primary Validator class that is used to validate your session_data against the API spec.</p>\n"}, {"fullname": "cave_utils.api_utils.validator.Validator", "modulename": "cave_utils.api_utils.validator", "qualname": "Validator", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cave_utils.api_utils.validator.Validator.__init__", "modulename": "cave_utils.api_utils.validator", "qualname": "Validator.__init__", "kind": "function", "doc": "<p>Util to validate your session_data against the API spec.</p>\n\n<p>Arguments:</p>\n\n<ul>\n<li><strong><code>session_data</code></strong>: <code>[dict]</code> &rarr; The data to validate.\n<ul>\n<li><strong>Note</strong>: This should be the data you are sending to the server.</li>\n</ul></li>\n<li><strong><code>ignore_keys</code></strong>: <code>[list[str]]</code> = <code>None</code> &rarr; Keys to ignore when validating.\n<ul>\n<li><strong>Note</strong>: Any keys specified here will be not be validated if encountered in the data at any level.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">session_data</span>, </span><span class=\"param\"><span class=\"n\">ignore_keys</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "cave_utils.api_utils.validator.Validator.session_data", "modulename": "cave_utils.api_utils.validator", "qualname": "Validator.session_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.api_utils.validator.Validator.log", "modulename": "cave_utils.api_utils.validator", "qualname": "Validator.log", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.api_utils.validator_utils", "modulename": "cave_utils.api_utils.validator_utils", "kind": "module", "doc": "<p>Special utility functions to help in validating your data against the CAVE API. This is not a key that should be passed as part of your <code>session_data</code>.</p>\n"}, {"fullname": "cave_utils.api_utils.validator_utils.ApiValidator", "modulename": "cave_utils.api_utils.validator_utils", "qualname": "ApiValidator", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cave_utils.api_utils.validator_utils.ApiValidator.__init__", "modulename": "cave_utils.api_utils.validator_utils", "qualname": "ApiValidator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">fields</span></span>)</span>"}, {"fullname": "cave_utils.api_utils.validator_utils.ApiValidator.spec", "modulename": "cave_utils.api_utils.validator_utils", "qualname": "ApiValidator.spec", "kind": "function", "doc": "<p>The default <code>spec</code> method.</p>\n\n<p>This provides a baseline spec for some utility validators.</p>\n\n<p>This should be overridden by any non utility child class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.api_utils.validator_utils.CustomKeyValidator", "modulename": "cave_utils.api_utils.validator_utils", "qualname": "CustomKeyValidator", "kind": "class", "doc": "<p></p>\n", "bases": "ApiValidator"}, {"fullname": "cave_utils.api_utils.validator_utils.CustomKeyValidator.spec", "modulename": "cave_utils.api_utils.validator_utils", "qualname": "CustomKeyValidator.spec", "kind": "function", "doc": "<p>The default <code>spec</code> method.</p>\n\n<p>This provides a baseline spec for some utility validators.</p>\n\n<p>This should be overridden by any non utility child class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.arguments", "modulename": "cave_utils.arguments", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cave_utils.arguments.Arguments", "modulename": "cave_utils.arguments", "qualname": "Arguments", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cave_utils.arguments.Arguments.passed_args", "modulename": "cave_utils.arguments", "qualname": "Arguments.passed_args", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.arguments.Arguments.populate_data", "modulename": "cave_utils.arguments", "qualname": "Arguments.populate_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.arguments.Arguments.get_kwarg", "modulename": "cave_utils.arguments", "qualname": "Arguments.get_kwarg", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.arguments.Arguments.has_flag", "modulename": "cave_utils.arguments", "qualname": "Arguments.has_flag", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.arguments.Arguments.delete", "modulename": "cave_utils.arguments", "qualname": "Arguments.delete", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">silent</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">only_flag</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.arguments.Arguments.get_arg_list", "modulename": "cave_utils.arguments", "qualname": "Arguments.get_arg_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.builders", "modulename": "cave_utils.builders", "kind": "module", "doc": "<h1 id=\"builders\">Builders</h1>\n\n<p>This module serves to document the <code>cave_utils.builders</code> module. This module is a collection of classes that are used to help build out the API for the <code>cave_app</code>.</p>\n\n<p>See the left hand side for all available builder submodules, and their associated docs.</p>\n"}, {"fullname": "cave_utils.builders.groups", "modulename": "cave_utils.builders.groups", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.GroupsUtils", "modulename": "cave_utils.builders.groups", "qualname": "GroupsUtils", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.GroupsUtils.serialize", "modulename": "cave_utils.builders.groups", "qualname": "GroupsUtils.serialize", "kind": "function", "doc": "<p>Serialize the group structure to a dictionary of the proper format.</p>\n\n<p>Returns:</p>\n\n<ul>\n<li><code>[dict]</code> &rarr; The serialized group structure.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.builders.groups.GroupsUtils.get_id_list", "modulename": "cave_utils.builders.groups", "qualname": "GroupsUtils.get_id_list", "kind": "function", "doc": "<p>Get the list of ids for the groups in the same order as the provided group_data.</p>\n\n<p>Returns:</p>\n\n<ul>\n<li><code>[list]</code> &rarr; The list of ids for the groups in the same order as the provided group_data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.builders.groups.GroupsBuilder", "modulename": "cave_utils.builders.groups", "qualname": "GroupsBuilder", "kind": "class", "doc": "<p></p>\n", "bases": "GroupsUtils"}, {"fullname": "cave_utils.builders.groups.GroupsBuilder.__init__", "modulename": "cave_utils.builders.groups", "qualname": "GroupsBuilder.__init__", "kind": "function", "doc": "<p>Initialize a group builder.</p>\n\n<p>Arguments:</p>\n\n<ul>\n<li><strong><code>group_name</code></strong>: <code>[str]</code> &rarr; The name of the group.</li>\n<li><strong><code>group_data</code></strong>: <code>[list[dict[str]]]</code> &rarr; The data to use to build the group.\n<ul>\n<li><strong>Note</strong>: This should be a list of dictionaries where each dictionary represents a combination of group keys and values.</li>\n<li><strong>Note</strong>: The keys in the dictionaries should be the same for all records.</li>\n<li><strong>Note</strong>: If the key <code>id</code> is specified, it will be used as the id for the group and not included in the group data.</li>\n<li><strong>Example</strong>: <code>[{'key1': 'value1', 'key2': 'value2'}, {'key1': 'value3', 'key2': 'value4'}]</code></li>\n</ul></li>\n<li><strong><code>group_parents</code></strong>: <code>[dict[str]]</code> &rarr; Parent allocations to make for groups.\n<ul>\n<li><strong>Note</strong>: This should be a dictionary where the keys are the child group keys and the values are the parent group keys.</li>\n<li><strong>Example</strong>: <code>{'child_key': 'parent_key'}</code>\n<ul>\n<li><strong>Note</strong>: This would mean that <code>child_key</code> has a parent of <code>fparent_key</code>.</li>\n</ul></li>\n<li><strong>Note</strong>: If a group is not a child of another group, it should not be included in the dictionary.</li>\n</ul></li>\n<li><strong><code>group_names</code></strong>: <code>[dict[str]]</code> &rarr; The group names to use for the group keys.\n<ul>\n<li><strong>Note</strong>: This should be a dictionary where the keys are the group keys and the values are the group_names to use for the group keys.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><code>[GroupsBuilder]</code> &rarr; The initialized GroupsBuilder object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">group_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">group_data</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">group_parents</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">group_names</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "cave_utils.builders.groups.GroupsBuilder.group_name", "modulename": "cave_utils.builders.groups", "qualname": "GroupsBuilder.group_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.GroupsBuilder.group_keys_all", "modulename": "cave_utils.builders.groups", "qualname": "GroupsBuilder.group_keys_all", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.GroupsBuilder.group_keys", "modulename": "cave_utils.builders.groups", "qualname": "GroupsBuilder.group_keys", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.GroupsBuilder.group_parents", "modulename": "cave_utils.builders.groups", "qualname": "GroupsBuilder.group_parents", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.GroupsBuilder.group_names", "modulename": "cave_utils.builders.groups", "qualname": "GroupsBuilder.group_names", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.GroupsBuilder.group_data", "modulename": "cave_utils.builders.groups", "qualname": "GroupsBuilder.group_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.GroupsBuilder.get_id", "modulename": "cave_utils.builders.groups", "qualname": "GroupsBuilder.get_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">group</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.builders.groups.DateGroupsBuilder", "modulename": "cave_utils.builders.groups", "qualname": "DateGroupsBuilder", "kind": "class", "doc": "<p></p>\n", "bases": "GroupsUtils"}, {"fullname": "cave_utils.builders.groups.DateGroupsBuilder.__init__", "modulename": "cave_utils.builders.groups", "qualname": "DateGroupsBuilder.__init__", "kind": "function", "doc": "<p>Initialize a date group builder.</p>\n\n<p>Arguments:</p>\n\n<ul>\n<li><strong><code>group_name</code></strong>: <code>[str]</code> &rarr; The name of the group.</li>\n<li><strong><code>date_data</code></strong>: <code>[list[str]]</code> &rarr; The list of dates to use to build the group.\n<ul>\n<li><strong>Note</strong>: This should be a list of strings where each string is a date in the format specified by <code>date_format</code>.</li>\n</ul></li>\n<li><strong><code>date_format</code></strong>: <code>[str]</code> = <code>\"%Y-%m-%d\"</code> &rarr; The format of the dates in <code>date_data</code>.</li>\n<li><strong><code>include_year</code></strong>: <code>[bool]</code> = <code>True</code> &rarr; Whether or not to include the year in the group.</li>\n<li><strong><code>include_year_month</code></strong>: <code>[bool]</code> = <code>True</code> &rarr; Whether or not to include the year and month in the group.</li>\n<li><strong><code>include_year_month_day</code></strong>: <code>[bool]</code> = <code>True</code> &rarr; Whether or not to include the year, month, and day in the group.</li>\n<li><strong><code>include_year_week</code></strong>: <code>[bool]</code> = <code>False</code> &rarr; Whether or not to include the year and week in the group.</li>\n<li><strong><code>include_year_day</code></strong>: <code>[bool]</code> = <code>False</code> &rarr; Whether or not to include the year and day in the group.</li>\n<li><strong><code>include_month</code></strong>: <code>[bool]</code> = <code>True</code> &rarr; Whether or not to include the month in the group.</li>\n<li><strong><code>include_month_week</code></strong>: <code>[bool]</code> = <code>False</code> &rarr; Whether or not to include the month and week in the group.</li>\n<li><strong><code>include_month_day</code></strong>: <code>[bool]</code> = <code>False</code> &rarr; Whether or not to include the month and day in the group.</li>\n<li><strong><code>include_week_day</code></strong>: <code>[bool]</code> = <code>True</code> &rarr; Whether or not to include the week day in the group.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><code>[DateGroupsBuilder]</code> &rarr; The initialized DateGroupsBuilder object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">group_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">date_data</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">date_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">include_year</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_year_month</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_year_month_day</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_year_week</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">include_year_day</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">include_month</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_month_week</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">include_month_day</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">include_week_day</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "cave_utils.builders.groups.DateGroupsBuilder.group_name", "modulename": "cave_utils.builders.groups", "qualname": "DateGroupsBuilder.group_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.DateGroupsBuilder.date_data", "modulename": "cave_utils.builders.groups", "qualname": "DateGroupsBuilder.date_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.DateGroupsBuilder.date_format", "modulename": "cave_utils.builders.groups", "qualname": "DateGroupsBuilder.date_format", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.DateGroupsBuilder.include_year", "modulename": "cave_utils.builders.groups", "qualname": "DateGroupsBuilder.include_year", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.DateGroupsBuilder.include_year_month", "modulename": "cave_utils.builders.groups", "qualname": "DateGroupsBuilder.include_year_month", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.DateGroupsBuilder.include_year_month_day", "modulename": "cave_utils.builders.groups", "qualname": "DateGroupsBuilder.include_year_month_day", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.DateGroupsBuilder.include_year_week", "modulename": "cave_utils.builders.groups", "qualname": "DateGroupsBuilder.include_year_week", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.DateGroupsBuilder.include_year_day", "modulename": "cave_utils.builders.groups", "qualname": "DateGroupsBuilder.include_year_day", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.DateGroupsBuilder.include_month", "modulename": "cave_utils.builders.groups", "qualname": "DateGroupsBuilder.include_month", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.DateGroupsBuilder.include_month_week", "modulename": "cave_utils.builders.groups", "qualname": "DateGroupsBuilder.include_month_week", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.DateGroupsBuilder.include_month_day", "modulename": "cave_utils.builders.groups", "qualname": "DateGroupsBuilder.include_month_day", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.DateGroupsBuilder.include_week_day", "modulename": "cave_utils.builders.groups", "qualname": "DateGroupsBuilder.include_week_day", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.DateGroupsBuilder.date_objects", "modulename": "cave_utils.builders.groups", "qualname": "DateGroupsBuilder.date_objects", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.builders.groups.DateGroupsBuilder.get_id", "modulename": "cave_utils.builders.groups", "qualname": "DateGroupsBuilder.get_id", "kind": "function", "doc": "<p>Ensure that the get_id function is not called with date Groups.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.geo_utils", "modulename": "cave_utils.geo_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cave_utils.geo_utils.GeoUtils", "modulename": "cave_utils.geo_utils", "qualname": "GeoUtils", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cave_utils.geo_utils.GeoUtils.create_shortest_paths_geojson", "modulename": "cave_utils.geo_utils", "qualname": "GeoUtils.create_shortest_paths_geojson", "kind": "function", "doc": "<p>Creates a geoJson output with the shortest paths between a list of\norigin and destination points.</p>\n\n<p>Arguments:</p>\n\n<ul>\n<li><strong><code>geoGraph</code></strong>: <code>[geoGraph]</code> &rarr; A geoGraph object from scgraph.</li>\n<li><strong><code>ids</code></strong>: <code>[list[int, str]]</code> &rarr; A list of identifiers for each path.\n<ul>\n<li>Note: These are imputed into the output GeoJSON as an id property.</li>\n</ul></li>\n<li><strong><code>origin_latitudes</code></strong>: <code>[list[int, float]]</code> &rarr;\n<ul>\n<li>A list of latitudes for the origin points.</li>\n</ul></li>\n<li><strong><code>origin_longitudes</code></strong>: <code>[list[int, float]]</code> &rarr;\n<ul>\n<li>A list of longitudes for the origin points.</li>\n</ul></li>\n<li><strong><code>destination_latitudes</code></strong>: <code>[list[int, float]]</code> &rarr;\n<ul>\n<li>A list of latitudes for the destination points.</li>\n</ul></li>\n<li><strong><code>destination_longitudes</code></strong>: <code>[list[int, float]]</code> &rarr;\n<ul>\n<li>A list of longitudes for the destination points.</li>\n</ul></li>\n<li><strong><code>additional_properties</code></strong>: <code>[list[dict], None]</code> &rarr;\n<ul>\n<li>A list of dictionaries with additional properties for each path.</li>\n<li>Note: The dictionaries must have the same length as the input lists.</li>\n<li>Note: The dictionaries are imputed into the output GeoJSON as properties.</li>\n</ul></li>\n<li><strong><code>show_progress</code></strong>: <code>[bool]</code> = <code>False</code> &rarr;\n<ul>\n<li>If <code>True</code>, shows the progress of the calculations.</li>\n</ul></li>\n<li><strong><code>filename</code></strong>: <code>[str, None]</code> = <code>None</code> &rarr;\n<ul>\n<li>If provided, saves the output GeoJSON to the specified filename.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong><code>output</code></strong>: <code>[dict]</code> &rarr; A GeoJSON dictionary with the shortest paths given the input data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">geoGraph</span>,</span><span class=\"param\">\t<span class=\"n\">ids</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">origin_latitudes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">origin_longitudes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">destination_latitudes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">destination_longitudes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">additional_properties</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\tfilename: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.log", "modulename": "cave_utils.log", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cave_utils.log.LogObject", "modulename": "cave_utils.log", "qualname": "LogObject", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cave_utils.log.LogObject.log", "modulename": "cave_utils.log", "qualname": "LogObject.log", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.log.LogObject.add", "modulename": "cave_utils.log", "qualname": "LogObject.add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"s1\">&#39;error&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.log.LogObject.get_logs", "modulename": "cave_utils.log", "qualname": "LogObject.get_logs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">max_count</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.log.LogObject.print_logs", "modulename": "cave_utils.log", "qualname": "LogObject.print_logs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\tlevel: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tmax_count: [&lt;class &#x27;int&#x27;&gt;, None] = None</span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.log.LogObject.write_logs", "modulename": "cave_utils.log", "qualname": "LogObject.write_logs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\tlevel: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\tmax_count: [&lt;class &#x27;int&#x27;&gt;, None] = None</span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.log.LogHelper", "modulename": "cave_utils.log", "qualname": "LogHelper", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cave_utils.log.LogHelper.__init__", "modulename": "cave_utils.log", "qualname": "LogHelper.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">cave_utils</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">LogObject</span>, </span><span class=\"param\"><span class=\"n\">prepend_path</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span>)</span>"}, {"fullname": "cave_utils.log.LogHelper.log", "modulename": "cave_utils.log", "qualname": "LogHelper.log", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.log.LogHelper.prepend_path", "modulename": "cave_utils.log", "qualname": "LogHelper.prepend_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.log.LogHelper.add", "modulename": "cave_utils.log", "qualname": "LogHelper.add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"s1\">&#39;error&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.socket", "modulename": "cave_utils.socket", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cave_utils.socket.Socket", "modulename": "cave_utils.socket", "qualname": "Socket", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cave_utils.socket.Socket.__init__", "modulename": "cave_utils.socket", "qualname": "Socket.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">silent</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "cave_utils.socket.Socket.silent", "modulename": "cave_utils.socket", "qualname": "Socket.silent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cave_utils.socket.Socket.broadcast", "modulename": "cave_utils.socket", "qualname": "Socket.broadcast", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cave_utils.socket.Socket.notify", "modulename": "cave_utils.socket", "qualname": "Socket.notify", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();